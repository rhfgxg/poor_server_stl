cmake_minimum_required (VERSION 3.8)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# 定义常量
project("poor_server_stl" VERSION 1.0)
if(NOT DEFINED CMAKE_TOOLCHAIN_FILE)    # 防止环境中定义了此变量
    # 设置 vcpkg 工具链文件路径
    set(CMAKE_TOOLCHAIN_FILE "D:/opt/tools/cpp/vcpkg/scripts/buildsystems/vcpkg.cmake" CACHE STRING "Vcpkg toolchain file")
endif()
# 设置 vcpkg安装的第三方库目录
set(CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}/vcpkg_installed/x64-windows")


# 包含头文件的目录，在子模块中生效
include_directories(
    ${VCPKG_INCLUDE}     # 第三方库的头文件所在目录
    # 共享工具类
    ${CMAKE_SOURCE_DIR}/src/common
    # 各服务器实现类
    ${CMAKE_SOURCE_DIR}/src/central
    ${CMAKE_SOURCE_DIR}/src/data
    ${CMAKE_SOURCE_DIR}/src/file
    ${CMAKE_SOURCE_DIR}/src/gateway
    ${CMAKE_SOURCE_DIR}/src/logic
    ${CMAKE_SOURCE_DIR}/src/login
    # proto生成的 grpc服务头文件目录
    ${CMAKE_SOURCE_DIR}/protobuf/central
    ${CMAKE_SOURCE_DIR}/protobuf/data
    ${CMAKE_SOURCE_DIR}/protobuf/file
    ${CMAKE_SOURCE_DIR}/protobuf/gateway
    ${CMAKE_SOURCE_DIR}/protobuf/logic
    ${CMAKE_SOURCE_DIR}/protobuf/login
)

# 需要编译的源文件列表
set(SOURCES
    src/main.cpp
)

# 指定编译生成的可执行文件信息：文件名${PROJECT_NAME} ，${SOURCES} 项目所有源文件路径
add_executable(${PROJECT_NAME} ${SOURCES})

# 设置编译选项
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244 /wd4251 /wd4828 /utf-8")   # 忽略警告，使用utf-8编码
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /D_ITERATOR_DEBUG_LEVEL=2")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /D_ITERATOR_DEBUG_LEVEL=0")

# 查找并链接第三方库
find_package(absl REQUIRED)
find_package(address_sorting REQUIRED)
find_package(Boost REQUIRED system)
find_package(c-ares REQUIRED)
find_package(cpp-redis REQUIRED)
find_package(fmt REQUIRED)
find_package(gRPC REQUIRED)
find_package(Lua REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(Protobuf REQUIRED)
find_package(re2 REQUIRED)
find_package(spdlog REQUIRED)
find_package(tacopie REQUIRED)
find_package(upd REQUIRED)
find_package(ZLIB REQUIRED)


# 第三方库 dll列表
set(DLL_FILES
    "${VCPKG_DEBUG_BIN}/abseil_dll.dll"
    "${VCPKG_DEBUG_BIN}/boost_system-vc143-mt-gd-x64-1_85.dll"
    "${VCPKG_DEBUG_BIN}/cares.dll"
    "${VCPKG_DEBUG_BIN}/fmtd.dll"
    "${VCPKG_DEBUG_BIN}/lua.dll"
    "${VCPKG_DEBUG_BIN}/libprotobufd.dll"
    "${VCPKG_DEBUG_BIN}/libprotocd.dll"
    "${VCPKG_DEBUG_BIN}/libssl-3-x64.dll"
    "${VCPKG_DEBUG_BIN}/libcrypto-3-x64.dll"
    "${VCPKG_DEBUG_BIN}/re2.dll"
    "${VCPKG_DEBUG_BIN}/spdlogd.dll"
    "${VCPKG_DEBUG_BIN}/zlibd1.dll"
)


# 添加每个模块，确保可以将所有变量
add_subdirectory(protobuf)
add_subdirectory(./src/central)
add_subdirectory(./src/data)
add_subdirectory(./src/file)
add_subdirectory(./src/gateway)
add_subdirectory(./src/logic)
add_subdirectory(./src/login)

# 链接第三方库
target_link_libraries(${PROJECT_NAME} PRIVATE
    absl::base
    address_sorting::address_sorting
    Boost::system
    c-ares::cares
    cpp_redis::cpp_redis
    fmt::fmt
    gRPC::grpc++
    lua
    OpenSSL::SSL
    OpenSSL::Crypto
    protobuf::libprotobuf
    re2::re2
    spdlog::spdlog
    tacopie::tacopie
    upd::upd
    ZLIB::ZLIB
)

# 安装可执行文件到 install/x64-Debug/bin 目录
install(TARGETS ${PROJECT_NAME} DESTINATION bin)

# 遍历 dll列表，将所有 .dll 文件，逐一复制到可执行文件生成目录
foreach(DLL_FILE ${DLL_FILES})
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${DLL_FILE}"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>  # 复制到可执行文件生成目录
    )
endforeach()