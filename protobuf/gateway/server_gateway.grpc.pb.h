// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_gateway.proto
#ifndef GRPC_server_5fgateway_2eproto__INCLUDED
#define GRPC_server_5fgateway_2eproto__INCLUDED

#include "server_gateway.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace rpc_server {

class GatewayServer final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc_server.GatewayServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Request_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::rpc_server::ForwardRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ForwardRes>> AsyncRequest_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ForwardRes>>(AsyncRequest_forwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ForwardRes>> PrepareAsyncRequest_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ForwardRes>>(PrepareAsyncRequest_forwardRaw(context, request, cq));
    }
    // 转发请求
    virtual ::grpc::Status Get_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::rpc_server::GetFileServerAddressRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::GetFileServerAddressRes>> AsyncGet_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::GetFileServerAddressRes>>(AsyncGet_file_server_addressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::GetFileServerAddressRes>> PrepareAsyncGet_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::GetFileServerAddressRes>>(PrepareAsyncGet_file_server_addressRaw(context, request, cq));
    }
    // 获取文件服务器地址，直连文件服务器进行文件传递
    virtual ::grpc::Status Client_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::rpc_server::ClientHeartbeatRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ClientHeartbeatRes>> AsyncClient_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ClientHeartbeatRes>>(AsyncClient_heartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ClientHeartbeatRes>> PrepareAsyncClient_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ClientHeartbeatRes>>(PrepareAsyncClient_heartbeatRaw(context, request, cq));
    }
    // 接收客户端心跳包
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Request_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq* request, ::rpc_server::ForwardRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Request_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq* request, ::rpc_server::ForwardRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 转发请求
      virtual void Get_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq* request, ::rpc_server::GetFileServerAddressRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq* request, ::rpc_server::GetFileServerAddressRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取文件服务器地址，直连文件服务器进行文件传递
      virtual void Client_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq* request, ::rpc_server::ClientHeartbeatRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Client_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq* request, ::rpc_server::ClientHeartbeatRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 接收客户端心跳包
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ForwardRes>* AsyncRequest_forwardRaw(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ForwardRes>* PrepareAsyncRequest_forwardRaw(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::GetFileServerAddressRes>* AsyncGet_file_server_addressRaw(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::GetFileServerAddressRes>* PrepareAsyncGet_file_server_addressRaw(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ClientHeartbeatRes>* AsyncClient_heartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::ClientHeartbeatRes>* PrepareAsyncClient_heartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Request_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::rpc_server::ForwardRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::ForwardRes>> AsyncRequest_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::ForwardRes>>(AsyncRequest_forwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::ForwardRes>> PrepareAsyncRequest_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::ForwardRes>>(PrepareAsyncRequest_forwardRaw(context, request, cq));
    }
    ::grpc::Status Get_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::rpc_server::GetFileServerAddressRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::GetFileServerAddressRes>> AsyncGet_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::GetFileServerAddressRes>>(AsyncGet_file_server_addressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::GetFileServerAddressRes>> PrepareAsyncGet_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::GetFileServerAddressRes>>(PrepareAsyncGet_file_server_addressRaw(context, request, cq));
    }
    ::grpc::Status Client_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::rpc_server::ClientHeartbeatRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::ClientHeartbeatRes>> AsyncClient_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::ClientHeartbeatRes>>(AsyncClient_heartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::ClientHeartbeatRes>> PrepareAsyncClient_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::ClientHeartbeatRes>>(PrepareAsyncClient_heartbeatRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Request_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq* request, ::rpc_server::ForwardRes* response, std::function<void(::grpc::Status)>) override;
      void Request_forward(::grpc::ClientContext* context, const ::rpc_server::ForwardReq* request, ::rpc_server::ForwardRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq* request, ::rpc_server::GetFileServerAddressRes* response, std::function<void(::grpc::Status)>) override;
      void Get_file_server_address(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq* request, ::rpc_server::GetFileServerAddressRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Client_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq* request, ::rpc_server::ClientHeartbeatRes* response, std::function<void(::grpc::Status)>) override;
      void Client_heartbeat(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq* request, ::rpc_server::ClientHeartbeatRes* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc_server::ForwardRes>* AsyncRequest_forwardRaw(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::ForwardRes>* PrepareAsyncRequest_forwardRaw(::grpc::ClientContext* context, const ::rpc_server::ForwardReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::GetFileServerAddressRes>* AsyncGet_file_server_addressRaw(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::GetFileServerAddressRes>* PrepareAsyncGet_file_server_addressRaw(::grpc::ClientContext* context, const ::rpc_server::GetFileServerAddressReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::ClientHeartbeatRes>* AsyncClient_heartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::ClientHeartbeatRes>* PrepareAsyncClient_heartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::ClientHeartbeatReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Request_forward_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_file_server_address_;
    const ::grpc::internal::RpcMethod rpcmethod_Client_heartbeat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Request_forward(::grpc::ServerContext* context, const ::rpc_server::ForwardReq* request, ::rpc_server::ForwardRes* response);
    // 转发请求
    virtual ::grpc::Status Get_file_server_address(::grpc::ServerContext* context, const ::rpc_server::GetFileServerAddressReq* request, ::rpc_server::GetFileServerAddressRes* response);
    // 获取文件服务器地址，直连文件服务器进行文件传递
    virtual ::grpc::Status Client_heartbeat(::grpc::ServerContext* context, const ::rpc_server::ClientHeartbeatReq* request, ::rpc_server::ClientHeartbeatRes* response);
    // 接收客户端心跳包
  };
  template <class BaseClass>
  class WithAsyncMethod_Request_forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Request_forward() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Request_forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Request_forward(::grpc::ServerContext* /*context*/, const ::rpc_server::ForwardReq* /*request*/, ::rpc_server::ForwardRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequest_forward(::grpc::ServerContext* context, ::rpc_server::ForwardReq* request, ::grpc::ServerAsyncResponseWriter< ::rpc_server::ForwardRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get_file_server_address : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get_file_server_address() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get_file_server_address() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_file_server_address(::grpc::ServerContext* /*context*/, const ::rpc_server::GetFileServerAddressReq* /*request*/, ::rpc_server::GetFileServerAddressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet_file_server_address(::grpc::ServerContext* context, ::rpc_server::GetFileServerAddressReq* request, ::grpc::ServerAsyncResponseWriter< ::rpc_server::GetFileServerAddressRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Client_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Client_heartbeat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Client_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Client_heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::ClientHeartbeatReq* /*request*/, ::rpc_server::ClientHeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClient_heartbeat(::grpc::ServerContext* context, ::rpc_server::ClientHeartbeatReq* request, ::grpc::ServerAsyncResponseWriter< ::rpc_server::ClientHeartbeatRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Request_forward<WithAsyncMethod_Get_file_server_address<WithAsyncMethod_Client_heartbeat<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Request_forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Request_forward() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc_server::ForwardReq, ::rpc_server::ForwardRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc_server::ForwardReq* request, ::rpc_server::ForwardRes* response) { return this->Request_forward(context, request, response); }));}
    void SetMessageAllocatorFor_Request_forward(
        ::grpc::MessageAllocator< ::rpc_server::ForwardReq, ::rpc_server::ForwardRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc_server::ForwardReq, ::rpc_server::ForwardRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Request_forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Request_forward(::grpc::ServerContext* /*context*/, const ::rpc_server::ForwardReq* /*request*/, ::rpc_server::ForwardRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Request_forward(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc_server::ForwardReq* /*request*/, ::rpc_server::ForwardRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get_file_server_address : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get_file_server_address() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc_server::GetFileServerAddressReq, ::rpc_server::GetFileServerAddressRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc_server::GetFileServerAddressReq* request, ::rpc_server::GetFileServerAddressRes* response) { return this->Get_file_server_address(context, request, response); }));}
    void SetMessageAllocatorFor_Get_file_server_address(
        ::grpc::MessageAllocator< ::rpc_server::GetFileServerAddressReq, ::rpc_server::GetFileServerAddressRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc_server::GetFileServerAddressReq, ::rpc_server::GetFileServerAddressRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get_file_server_address() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_file_server_address(::grpc::ServerContext* /*context*/, const ::rpc_server::GetFileServerAddressReq* /*request*/, ::rpc_server::GetFileServerAddressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get_file_server_address(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc_server::GetFileServerAddressReq* /*request*/, ::rpc_server::GetFileServerAddressRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Client_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Client_heartbeat() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc_server::ClientHeartbeatReq, ::rpc_server::ClientHeartbeatRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc_server::ClientHeartbeatReq* request, ::rpc_server::ClientHeartbeatRes* response) { return this->Client_heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Client_heartbeat(
        ::grpc::MessageAllocator< ::rpc_server::ClientHeartbeatReq, ::rpc_server::ClientHeartbeatRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc_server::ClientHeartbeatReq, ::rpc_server::ClientHeartbeatRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Client_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Client_heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::ClientHeartbeatReq* /*request*/, ::rpc_server::ClientHeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Client_heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc_server::ClientHeartbeatReq* /*request*/, ::rpc_server::ClientHeartbeatRes* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Request_forward<WithCallbackMethod_Get_file_server_address<WithCallbackMethod_Client_heartbeat<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Request_forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Request_forward() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Request_forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Request_forward(::grpc::ServerContext* /*context*/, const ::rpc_server::ForwardReq* /*request*/, ::rpc_server::ForwardRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get_file_server_address : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get_file_server_address() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get_file_server_address() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_file_server_address(::grpc::ServerContext* /*context*/, const ::rpc_server::GetFileServerAddressReq* /*request*/, ::rpc_server::GetFileServerAddressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Client_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Client_heartbeat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Client_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Client_heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::ClientHeartbeatReq* /*request*/, ::rpc_server::ClientHeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Request_forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Request_forward() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Request_forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Request_forward(::grpc::ServerContext* /*context*/, const ::rpc_server::ForwardReq* /*request*/, ::rpc_server::ForwardRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequest_forward(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get_file_server_address : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get_file_server_address() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get_file_server_address() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_file_server_address(::grpc::ServerContext* /*context*/, const ::rpc_server::GetFileServerAddressReq* /*request*/, ::rpc_server::GetFileServerAddressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet_file_server_address(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Client_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Client_heartbeat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Client_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Client_heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::ClientHeartbeatReq* /*request*/, ::rpc_server::ClientHeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClient_heartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Request_forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Request_forward() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Request_forward(context, request, response); }));
    }
    ~WithRawCallbackMethod_Request_forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Request_forward(::grpc::ServerContext* /*context*/, const ::rpc_server::ForwardReq* /*request*/, ::rpc_server::ForwardRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Request_forward(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get_file_server_address : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get_file_server_address() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get_file_server_address(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get_file_server_address() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_file_server_address(::grpc::ServerContext* /*context*/, const ::rpc_server::GetFileServerAddressReq* /*request*/, ::rpc_server::GetFileServerAddressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get_file_server_address(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Client_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Client_heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Client_heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Client_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Client_heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::ClientHeartbeatReq* /*request*/, ::rpc_server::ClientHeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Client_heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Request_forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Request_forward() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc_server::ForwardReq, ::rpc_server::ForwardRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc_server::ForwardReq, ::rpc_server::ForwardRes>* streamer) {
                       return this->StreamedRequest_forward(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Request_forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Request_forward(::grpc::ServerContext* /*context*/, const ::rpc_server::ForwardReq* /*request*/, ::rpc_server::ForwardRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequest_forward(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc_server::ForwardReq,::rpc_server::ForwardRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get_file_server_address : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get_file_server_address() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc_server::GetFileServerAddressReq, ::rpc_server::GetFileServerAddressRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc_server::GetFileServerAddressReq, ::rpc_server::GetFileServerAddressRes>* streamer) {
                       return this->StreamedGet_file_server_address(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get_file_server_address() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get_file_server_address(::grpc::ServerContext* /*context*/, const ::rpc_server::GetFileServerAddressReq* /*request*/, ::rpc_server::GetFileServerAddressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet_file_server_address(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc_server::GetFileServerAddressReq,::rpc_server::GetFileServerAddressRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Client_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Client_heartbeat() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc_server::ClientHeartbeatReq, ::rpc_server::ClientHeartbeatRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc_server::ClientHeartbeatReq, ::rpc_server::ClientHeartbeatRes>* streamer) {
                       return this->StreamedClient_heartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Client_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Client_heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::ClientHeartbeatReq* /*request*/, ::rpc_server::ClientHeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClient_heartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc_server::ClientHeartbeatReq,::rpc_server::ClientHeartbeatRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Request_forward<WithStreamedUnaryMethod_Get_file_server_address<WithStreamedUnaryMethod_Client_heartbeat<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Request_forward<WithStreamedUnaryMethod_Get_file_server_address<WithStreamedUnaryMethod_Client_heartbeat<Service > > > StreamedService;
};

}  // namespace rpc_server


#endif  // GRPC_server_5fgateway_2eproto__INCLUDED
