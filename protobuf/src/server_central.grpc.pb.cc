// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_central.proto

#include "server_central.pb.h"
#include "server_central.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace rpc_server {

static const char* CentralServer_method_names[] = {
  "/rpc_server.CentralServer/Register_server",
  "/rpc_server.CentralServer/Unregister_server",
  "/rpc_server.CentralServer/Get_connec_poor",
  "/rpc_server.CentralServer/Heartbeat",
};

std::unique_ptr< CentralServer::Stub> CentralServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CentralServer::Stub> stub(new CentralServer::Stub(channel, options));
  return stub;
}

CentralServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_server_(CentralServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unregister_server_(CentralServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_connec_poor_(CentralServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(CentralServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CentralServer::Stub::Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::rpc_server::RegisterServerRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::RegisterServerReq, ::rpc_server::RegisterServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_server_, context, request, response);
}

void CentralServer::Stub::async::Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::RegisterServerReq, ::rpc_server::RegisterServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_server_, context, request, response, std::move(f));
}

void CentralServer::Stub::async::Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_server_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::RegisterServerRes>* CentralServer::Stub::PrepareAsyncRegister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::RegisterServerRes, ::rpc_server::RegisterServerReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_server_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::RegisterServerRes>* CentralServer::Stub::AsyncRegister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegister_serverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralServer::Stub::Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::rpc_server::UnregisterServerRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::UnregisterServerReq, ::rpc_server::UnregisterServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unregister_server_, context, request, response);
}

void CentralServer::Stub::async::Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::UnregisterServerReq, ::rpc_server::UnregisterServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unregister_server_, context, request, response, std::move(f));
}

void CentralServer::Stub::async::Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unregister_server_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::UnregisterServerRes>* CentralServer::Stub::PrepareAsyncUnregister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::UnregisterServerRes, ::rpc_server::UnregisterServerReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unregister_server_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::UnregisterServerRes>* CentralServer::Stub::AsyncUnregister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnregister_serverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralServer::Stub::Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::rpc_server::MultipleConnectPoorRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::MultipleConnectPoorReq, ::rpc_server::MultipleConnectPoorRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_connec_poor_, context, request, response);
}

void CentralServer::Stub::async::Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::MultipleConnectPoorReq, ::rpc_server::MultipleConnectPoorRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_connec_poor_, context, request, response, std::move(f));
}

void CentralServer::Stub::async::Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_connec_poor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::MultipleConnectPoorRes>* CentralServer::Stub::PrepareAsyncGet_connec_poorRaw(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::MultipleConnectPoorRes, ::rpc_server::MultipleConnectPoorReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_connec_poor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::MultipleConnectPoorRes>* CentralServer::Stub::AsyncGet_connec_poorRaw(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGet_connec_poorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralServer::Stub::Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::rpc_server::HeartbeatRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::HeartbeatReq, ::rpc_server::HeartbeatRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void CentralServer::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::HeartbeatReq, ::rpc_server::HeartbeatRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void CentralServer::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::HeartbeatRes>* CentralServer::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::HeartbeatRes, ::rpc_server::HeartbeatReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::HeartbeatRes>* CentralServer::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

CentralServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralServer::Service, ::rpc_server::RegisterServerReq, ::rpc_server::RegisterServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::RegisterServerReq* req,
             ::rpc_server::RegisterServerRes* resp) {
               return service->Register_server(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralServer::Service, ::rpc_server::UnregisterServerReq, ::rpc_server::UnregisterServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::UnregisterServerReq* req,
             ::rpc_server::UnregisterServerRes* resp) {
               return service->Unregister_server(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralServer::Service, ::rpc_server::MultipleConnectPoorReq, ::rpc_server::MultipleConnectPoorRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::MultipleConnectPoorReq* req,
             ::rpc_server::MultipleConnectPoorRes* resp) {
               return service->Get_connec_poor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralServer::Service, ::rpc_server::HeartbeatReq, ::rpc_server::HeartbeatRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::HeartbeatReq* req,
             ::rpc_server::HeartbeatRes* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
}

CentralServer::Service::~Service() {
}

::grpc::Status CentralServer::Service::Register_server(::grpc::ServerContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralServer::Service::Unregister_server(::grpc::ServerContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralServer::Service::Get_connec_poor(::grpc::ServerContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralServer::Service::Heartbeat(::grpc::ServerContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc_server

