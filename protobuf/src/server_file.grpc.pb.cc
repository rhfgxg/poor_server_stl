// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_file.proto

#include "server_file.pb.h"
#include "server_file.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace rpc_server {

static const char* FileServer_method_names[] = {
  "/rpc_server.FileServer/Transmission_ready",
  "/rpc_server.FileServer/Upload",
  "/rpc_server.FileServer/Download",
  "/rpc_server.FileServer/Delete",
  "/rpc_server.FileServer/ListFiles",
};

std::unique_ptr< FileServer::Stub> FileServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileServer::Stub> stub(new FileServer::Stub(channel, options));
  return stub;
}

FileServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Transmission_ready_(FileServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Upload_(FileServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Download_(FileServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(FileServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFiles_(FileServer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileServer::Stub::Transmission_ready(::grpc::ClientContext* context, const ::rpc_server::TransmissionReadyReq& request, ::rpc_server::TransmissionReadyRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::TransmissionReadyReq, ::rpc_server::TransmissionReadyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Transmission_ready_, context, request, response);
}

void FileServer::Stub::async::Transmission_ready(::grpc::ClientContext* context, const ::rpc_server::TransmissionReadyReq* request, ::rpc_server::TransmissionReadyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::TransmissionReadyReq, ::rpc_server::TransmissionReadyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Transmission_ready_, context, request, response, std::move(f));
}

void FileServer::Stub::async::Transmission_ready(::grpc::ClientContext* context, const ::rpc_server::TransmissionReadyReq* request, ::rpc_server::TransmissionReadyRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Transmission_ready_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::TransmissionReadyRes>* FileServer::Stub::PrepareAsyncTransmission_readyRaw(::grpc::ClientContext* context, const ::rpc_server::TransmissionReadyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::TransmissionReadyRes, ::rpc_server::TransmissionReadyReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Transmission_ready_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::TransmissionReadyRes>* FileServer::Stub::AsyncTransmission_readyRaw(::grpc::ClientContext* context, const ::rpc_server::TransmissionReadyReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransmission_readyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileServer::Stub::Upload(::grpc::ClientContext* context, const ::rpc_server::UploadReq& request, ::rpc_server::UploadRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::UploadReq, ::rpc_server::UploadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Upload_, context, request, response);
}

void FileServer::Stub::async::Upload(::grpc::ClientContext* context, const ::rpc_server::UploadReq* request, ::rpc_server::UploadRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::UploadReq, ::rpc_server::UploadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, std::move(f));
}

void FileServer::Stub::async::Upload(::grpc::ClientContext* context, const ::rpc_server::UploadReq* request, ::rpc_server::UploadRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::UploadRes>* FileServer::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, const ::rpc_server::UploadReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::UploadRes, ::rpc_server::UploadReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Upload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::UploadRes>* FileServer::Stub::AsyncUploadRaw(::grpc::ClientContext* context, const ::rpc_server::UploadReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileServer::Stub::Download(::grpc::ClientContext* context, const ::rpc_server::DownloadReq& request, ::rpc_server::DownloadRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::DownloadReq, ::rpc_server::DownloadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Download_, context, request, response);
}

void FileServer::Stub::async::Download(::grpc::ClientContext* context, const ::rpc_server::DownloadReq* request, ::rpc_server::DownloadRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::DownloadReq, ::rpc_server::DownloadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, response, std::move(f));
}

void FileServer::Stub::async::Download(::grpc::ClientContext* context, const ::rpc_server::DownloadReq* request, ::rpc_server::DownloadRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::DownloadRes>* FileServer::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::rpc_server::DownloadReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::DownloadRes, ::rpc_server::DownloadReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Download_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::DownloadRes>* FileServer::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::rpc_server::DownloadReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileServer::Stub::Delete(::grpc::ClientContext* context, const ::rpc_server::DeleteFileReq& request, ::rpc_server::DeleteFileRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::DeleteFileReq, ::rpc_server::DeleteFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void FileServer::Stub::async::Delete(::grpc::ClientContext* context, const ::rpc_server::DeleteFileReq* request, ::rpc_server::DeleteFileRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::DeleteFileReq, ::rpc_server::DeleteFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void FileServer::Stub::async::Delete(::grpc::ClientContext* context, const ::rpc_server::DeleteFileReq* request, ::rpc_server::DeleteFileRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::DeleteFileRes>* FileServer::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::rpc_server::DeleteFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::DeleteFileRes, ::rpc_server::DeleteFileReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::DeleteFileRes>* FileServer::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::rpc_server::DeleteFileReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileServer::Stub::ListFiles(::grpc::ClientContext* context, const ::rpc_server::ListFilesReq& request, ::rpc_server::ListFilesRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::ListFilesReq, ::rpc_server::ListFilesRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListFiles_, context, request, response);
}

void FileServer::Stub::async::ListFiles(::grpc::ClientContext* context, const ::rpc_server::ListFilesReq* request, ::rpc_server::ListFilesRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::ListFilesReq, ::rpc_server::ListFilesRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, std::move(f));
}

void FileServer::Stub::async::ListFiles(::grpc::ClientContext* context, const ::rpc_server::ListFilesReq* request, ::rpc_server::ListFilesRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::ListFilesRes>* FileServer::Stub::PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::rpc_server::ListFilesReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::ListFilesRes, ::rpc_server::ListFilesReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::ListFilesRes>* FileServer::Stub::AsyncListFilesRaw(::grpc::ClientContext* context, const ::rpc_server::ListFilesReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileServer::Service, ::rpc_server::TransmissionReadyReq, ::rpc_server::TransmissionReadyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::TransmissionReadyReq* req,
             ::rpc_server::TransmissionReadyRes* resp) {
               return service->Transmission_ready(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileServer::Service, ::rpc_server::UploadReq, ::rpc_server::UploadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::UploadReq* req,
             ::rpc_server::UploadRes* resp) {
               return service->Upload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileServer::Service, ::rpc_server::DownloadReq, ::rpc_server::DownloadRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::DownloadReq* req,
             ::rpc_server::DownloadRes* resp) {
               return service->Download(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileServer::Service, ::rpc_server::DeleteFileReq, ::rpc_server::DeleteFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::DeleteFileReq* req,
             ::rpc_server::DeleteFileRes* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileServer::Service, ::rpc_server::ListFilesReq, ::rpc_server::ListFilesRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::ListFilesReq* req,
             ::rpc_server::ListFilesRes* resp) {
               return service->ListFiles(ctx, req, resp);
             }, this)));
}

FileServer::Service::~Service() {
}

::grpc::Status FileServer::Service::Transmission_ready(::grpc::ServerContext* context, const ::rpc_server::TransmissionReadyReq* request, ::rpc_server::TransmissionReadyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileServer::Service::Upload(::grpc::ServerContext* context, const ::rpc_server::UploadReq* request, ::rpc_server::UploadRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileServer::Service::Download(::grpc::ServerContext* context, const ::rpc_server::DownloadReq* request, ::rpc_server::DownloadRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileServer::Service::Delete(::grpc::ServerContext* context, const ::rpc_server::DeleteFileReq* request, ::rpc_server::DeleteFileRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileServer::Service::ListFiles(::grpc::ServerContext* context, const ::rpc_server::ListFilesReq* request, ::rpc_server::ListFilesRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc_server

