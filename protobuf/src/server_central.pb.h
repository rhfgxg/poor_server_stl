// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_central.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fcentral_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_server_5fcentral_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_server_5fcentral_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fcentral_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_server_5fcentral_2eproto;
namespace rpc_server {
class ConnectInfo;
struct ConnectInfoDefaultTypeInternal;
extern ConnectInfoDefaultTypeInternal _ConnectInfo_default_instance_;
class ConnectPool;
struct ConnectPoolDefaultTypeInternal;
extern ConnectPoolDefaultTypeInternal _ConnectPool_default_instance_;
class HeartbeatReq;
struct HeartbeatReqDefaultTypeInternal;
extern HeartbeatReqDefaultTypeInternal _HeartbeatReq_default_instance_;
class HeartbeatRes;
struct HeartbeatResDefaultTypeInternal;
extern HeartbeatResDefaultTypeInternal _HeartbeatRes_default_instance_;
class MultipleConnectPoorReq;
struct MultipleConnectPoorReqDefaultTypeInternal;
extern MultipleConnectPoorReqDefaultTypeInternal _MultipleConnectPoorReq_default_instance_;
class MultipleConnectPoorRes;
struct MultipleConnectPoorResDefaultTypeInternal;
extern MultipleConnectPoorResDefaultTypeInternal _MultipleConnectPoorRes_default_instance_;
class RegisterServerReq;
struct RegisterServerReqDefaultTypeInternal;
extern RegisterServerReqDefaultTypeInternal _RegisterServerReq_default_instance_;
class RegisterServerRes;
struct RegisterServerResDefaultTypeInternal;
extern RegisterServerResDefaultTypeInternal _RegisterServerRes_default_instance_;
class UnregisterServerReq;
struct UnregisterServerReqDefaultTypeInternal;
extern UnregisterServerReqDefaultTypeInternal _UnregisterServerReq_default_instance_;
class UnregisterServerRes;
struct UnregisterServerResDefaultTypeInternal;
extern UnregisterServerResDefaultTypeInternal _UnregisterServerRes_default_instance_;
}  // namespace rpc_server
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rpc_server {

// ===================================================================


// -------------------------------------------------------------------

class UnregisterServerRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.UnregisterServerRes) */ {
 public:
  inline UnregisterServerRes() : UnregisterServerRes(nullptr) {}
  ~UnregisterServerRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UnregisterServerRes(::google::protobuf::internal::ConstantInitialized);

  inline UnregisterServerRes(const UnregisterServerRes& from)
      : UnregisterServerRes(nullptr, from) {}
  UnregisterServerRes(UnregisterServerRes&& from) noexcept
    : UnregisterServerRes() {
    *this = ::std::move(from);
  }

  inline UnregisterServerRes& operator=(const UnregisterServerRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterServerRes& operator=(UnregisterServerRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnregisterServerRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnregisterServerRes* internal_default_instance() {
    return reinterpret_cast<const UnregisterServerRes*>(
               &_UnregisterServerRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnregisterServerRes& a, UnregisterServerRes& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterServerRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterServerRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnregisterServerRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnregisterServerRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnregisterServerRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UnregisterServerRes& from) {
    UnregisterServerRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UnregisterServerRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.UnregisterServerRes";
  }
  protected:
  explicit UnregisterServerRes(::google::protobuf::Arena* arena);
  UnregisterServerRes(::google::protobuf::Arena* arena, const UnregisterServerRes& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // bytes message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.UnregisterServerRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class UnregisterServerReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.UnregisterServerReq) */ {
 public:
  inline UnregisterServerReq() : UnregisterServerReq(nullptr) {}
  ~UnregisterServerReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UnregisterServerReq(::google::protobuf::internal::ConstantInitialized);

  inline UnregisterServerReq(const UnregisterServerReq& from)
      : UnregisterServerReq(nullptr, from) {}
  UnregisterServerReq(UnregisterServerReq&& from) noexcept
    : UnregisterServerReq() {
    *this = ::std::move(from);
  }

  inline UnregisterServerReq& operator=(const UnregisterServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterServerReq& operator=(UnregisterServerReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnregisterServerReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnregisterServerReq* internal_default_instance() {
    return reinterpret_cast<const UnregisterServerReq*>(
               &_UnregisterServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnregisterServerReq& a, UnregisterServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterServerReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterServerReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnregisterServerReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnregisterServerReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnregisterServerReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UnregisterServerReq& from) {
    UnregisterServerReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UnregisterServerReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.UnregisterServerReq";
  }
  protected:
  explicit UnregisterServerReq(::google::protobuf::Arena* arena);
  UnregisterServerReq(::google::protobuf::Arena* arena, const UnregisterServerReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kPortFieldNumber = 3,
    kServerTypeFieldNumber = 1,
  };
  // bytes address = 2;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // bytes port = 3;
  void clear_port() ;
  const std::string& port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* value);

  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(
      const std::string& value);
  std::string* _internal_mutable_port();

  public:
  // int32 server_type = 1;
  void clear_server_type() ;
  ::int32_t server_type() const;
  void set_server_type(::int32_t value);

  private:
  ::int32_t _internal_server_type() const;
  void _internal_set_server_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.UnregisterServerReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr port_;
    ::int32_t server_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class RegisterServerRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.RegisterServerRes) */ {
 public:
  inline RegisterServerRes() : RegisterServerRes(nullptr) {}
  ~RegisterServerRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterServerRes(::google::protobuf::internal::ConstantInitialized);

  inline RegisterServerRes(const RegisterServerRes& from)
      : RegisterServerRes(nullptr, from) {}
  RegisterServerRes(RegisterServerRes&& from) noexcept
    : RegisterServerRes() {
    *this = ::std::move(from);
  }

  inline RegisterServerRes& operator=(const RegisterServerRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerRes& operator=(RegisterServerRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerRes* internal_default_instance() {
    return reinterpret_cast<const RegisterServerRes*>(
               &_RegisterServerRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterServerRes& a, RegisterServerRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterServerRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisterServerRes& from) {
    RegisterServerRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterServerRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.RegisterServerRes";
  }
  protected:
  explicit RegisterServerRes(::google::protobuf::Arena* arena);
  RegisterServerRes(::google::protobuf::Arena* arena, const RegisterServerRes& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // bytes message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.RegisterServerRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class RegisterServerReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.RegisterServerReq) */ {
 public:
  inline RegisterServerReq() : RegisterServerReq(nullptr) {}
  ~RegisterServerReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterServerReq(::google::protobuf::internal::ConstantInitialized);

  inline RegisterServerReq(const RegisterServerReq& from)
      : RegisterServerReq(nullptr, from) {}
  RegisterServerReq(RegisterServerReq&& from) noexcept
    : RegisterServerReq() {
    *this = ::std::move(from);
  }

  inline RegisterServerReq& operator=(const RegisterServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerReq& operator=(RegisterServerReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerReq* internal_default_instance() {
    return reinterpret_cast<const RegisterServerReq*>(
               &_RegisterServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterServerReq& a, RegisterServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterServerReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisterServerReq& from) {
    RegisterServerReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterServerReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.RegisterServerReq";
  }
  protected:
  explicit RegisterServerReq(::google::protobuf::Arena* arena);
  RegisterServerReq(::google::protobuf::Arena* arena, const RegisterServerReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kPortFieldNumber = 3,
    kServerTypeFieldNumber = 1,
  };
  // bytes address = 2;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // bytes port = 3;
  void clear_port() ;
  const std::string& port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* value);

  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(
      const std::string& value);
  std::string* _internal_mutable_port();

  public:
  // int32 server_type = 1;
  void clear_server_type() ;
  ::int32_t server_type() const;
  void set_server_type(::int32_t value);

  private:
  ::int32_t _internal_server_type() const;
  void _internal_set_server_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.RegisterServerReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr port_;
    ::int32_t server_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class MultipleConnectPoorReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.MultipleConnectPoorReq) */ {
 public:
  inline MultipleConnectPoorReq() : MultipleConnectPoorReq(nullptr) {}
  ~MultipleConnectPoorReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MultipleConnectPoorReq(::google::protobuf::internal::ConstantInitialized);

  inline MultipleConnectPoorReq(const MultipleConnectPoorReq& from)
      : MultipleConnectPoorReq(nullptr, from) {}
  MultipleConnectPoorReq(MultipleConnectPoorReq&& from) noexcept
    : MultipleConnectPoorReq() {
    *this = ::std::move(from);
  }

  inline MultipleConnectPoorReq& operator=(const MultipleConnectPoorReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleConnectPoorReq& operator=(MultipleConnectPoorReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultipleConnectPoorReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultipleConnectPoorReq* internal_default_instance() {
    return reinterpret_cast<const MultipleConnectPoorReq*>(
               &_MultipleConnectPoorReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultipleConnectPoorReq& a, MultipleConnectPoorReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleConnectPoorReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipleConnectPoorReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultipleConnectPoorReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultipleConnectPoorReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultipleConnectPoorReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MultipleConnectPoorReq& from) {
    MultipleConnectPoorReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MultipleConnectPoorReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.MultipleConnectPoorReq";
  }
  protected:
  explicit MultipleConnectPoorReq(::google::protobuf::Arena* arena);
  MultipleConnectPoorReq(::google::protobuf::Arena* arena, const MultipleConnectPoorReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTypesFieldNumber = 1,
  };
  // repeated int32 server_types = 1;
  int server_types_size() const;
  private:
  int _internal_server_types_size() const;

  public:
  void clear_server_types() ;
  ::int32_t server_types(int index) const;
  void set_server_types(int index, ::int32_t value);
  void add_server_types(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& server_types() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_server_types();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_server_types() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_server_types();

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.MultipleConnectPoorReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> server_types_;
    mutable ::google::protobuf::internal::CachedSize _server_types_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class HeartbeatRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.HeartbeatRes) */ {
 public:
  inline HeartbeatRes() : HeartbeatRes(nullptr) {}
  ~HeartbeatRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HeartbeatRes(::google::protobuf::internal::ConstantInitialized);

  inline HeartbeatRes(const HeartbeatRes& from)
      : HeartbeatRes(nullptr, from) {}
  HeartbeatRes(HeartbeatRes&& from) noexcept
    : HeartbeatRes() {
    *this = ::std::move(from);
  }

  inline HeartbeatRes& operator=(const HeartbeatRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRes& operator=(HeartbeatRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatRes* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRes*>(
               &_HeartbeatRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HeartbeatRes& a, HeartbeatRes& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeartbeatRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HeartbeatRes& from) {
    HeartbeatRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HeartbeatRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.HeartbeatRes";
  }
  protected:
  explicit HeartbeatRes(::google::protobuf::Arena* arena);
  HeartbeatRes(::google::protobuf::Arena* arena, const HeartbeatRes& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // bytes message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.HeartbeatRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class HeartbeatReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.HeartbeatReq) */ {
 public:
  inline HeartbeatReq() : HeartbeatReq(nullptr) {}
  ~HeartbeatReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HeartbeatReq(::google::protobuf::internal::ConstantInitialized);

  inline HeartbeatReq(const HeartbeatReq& from)
      : HeartbeatReq(nullptr, from) {}
  HeartbeatReq(HeartbeatReq&& from) noexcept
    : HeartbeatReq() {
    *this = ::std::move(from);
  }

  inline HeartbeatReq& operator=(const HeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatReq& operator=(HeartbeatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatReq* internal_default_instance() {
    return reinterpret_cast<const HeartbeatReq*>(
               &_HeartbeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HeartbeatReq& a, HeartbeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeartbeatReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HeartbeatReq& from) {
    HeartbeatReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HeartbeatReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.HeartbeatReq";
  }
  protected:
  explicit HeartbeatReq(::google::protobuf::Arena* arena);
  HeartbeatReq(::google::protobuf::Arena* arena, const HeartbeatReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kPortFieldNumber = 3,
    kServerTypeFieldNumber = 1,
  };
  // bytes address = 2;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // bytes port = 3;
  void clear_port() ;
  const std::string& port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* value);

  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(
      const std::string& value);
  std::string* _internal_mutable_port();

  public:
  // int32 server_type = 1;
  void clear_server_type() ;
  ::int32_t server_type() const;
  void set_server_type(::int32_t value);

  private:
  ::int32_t _internal_server_type() const;
  void _internal_set_server_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.HeartbeatReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr port_;
    ::int32_t server_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class ConnectInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.ConnectInfo) */ {
 public:
  inline ConnectInfo() : ConnectInfo(nullptr) {}
  ~ConnectInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectInfo(::google::protobuf::internal::ConstantInitialized);

  inline ConnectInfo(const ConnectInfo& from)
      : ConnectInfo(nullptr, from) {}
  ConnectInfo(ConnectInfo&& from) noexcept
    : ConnectInfo() {
    *this = ::std::move(from);
  }

  inline ConnectInfo& operator=(const ConnectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectInfo& operator=(ConnectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectInfo*>(
               &_ConnectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConnectInfo& a, ConnectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConnectInfo& from) {
    ConnectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConnectInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.ConnectInfo";
  }
  protected:
  explicit ConnectInfo(::google::protobuf::Arena* arena);
  ConnectInfo(::google::protobuf::Arena* arena, const ConnectInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // bytes address = 1;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.ConnectInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::int32_t port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class ConnectPool final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.ConnectPool) */ {
 public:
  inline ConnectPool() : ConnectPool(nullptr) {}
  ~ConnectPool() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectPool(::google::protobuf::internal::ConstantInitialized);

  inline ConnectPool(const ConnectPool& from)
      : ConnectPool(nullptr, from) {}
  ConnectPool(ConnectPool&& from) noexcept
    : ConnectPool() {
    *this = ::std::move(from);
  }

  inline ConnectPool& operator=(const ConnectPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectPool& operator=(ConnectPool&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectPool& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectPool* internal_default_instance() {
    return reinterpret_cast<const ConnectPool*>(
               &_ConnectPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConnectPool& a, ConnectPool& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectPool* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectPool* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectPool* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectPool>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectPool& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConnectPool& from) {
    ConnectPool::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConnectPool* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.ConnectPool";
  }
  protected:
  explicit ConnectPool(::google::protobuf::Arena* arena);
  ConnectPool(::google::protobuf::Arena* arena, const ConnectPool& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectInfoFieldNumber = 2,
    kServerTypeFieldNumber = 1,
  };
  // repeated .rpc_server.ConnectInfo connect_info = 2;
  int connect_info_size() const;
  private:
  int _internal_connect_info_size() const;

  public:
  void clear_connect_info() ;
  ::rpc_server::ConnectInfo* mutable_connect_info(int index);
  ::google::protobuf::RepeatedPtrField< ::rpc_server::ConnectInfo >*
      mutable_connect_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectInfo>& _internal_connect_info() const;
  ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectInfo>* _internal_mutable_connect_info();
  public:
  const ::rpc_server::ConnectInfo& connect_info(int index) const;
  ::rpc_server::ConnectInfo* add_connect_info();
  const ::google::protobuf::RepeatedPtrField< ::rpc_server::ConnectInfo >&
      connect_info() const;
  // int32 server_type = 1;
  void clear_server_type() ;
  ::int32_t server_type() const;
  void set_server_type(::int32_t value);

  private:
  ::int32_t _internal_server_type() const;
  void _internal_set_server_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.ConnectPool)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::rpc_server::ConnectInfo > connect_info_;
    ::int32_t server_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};// -------------------------------------------------------------------

class MultipleConnectPoorRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.MultipleConnectPoorRes) */ {
 public:
  inline MultipleConnectPoorRes() : MultipleConnectPoorRes(nullptr) {}
  ~MultipleConnectPoorRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MultipleConnectPoorRes(::google::protobuf::internal::ConstantInitialized);

  inline MultipleConnectPoorRes(const MultipleConnectPoorRes& from)
      : MultipleConnectPoorRes(nullptr, from) {}
  MultipleConnectPoorRes(MultipleConnectPoorRes&& from) noexcept
    : MultipleConnectPoorRes() {
    *this = ::std::move(from);
  }

  inline MultipleConnectPoorRes& operator=(const MultipleConnectPoorRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleConnectPoorRes& operator=(MultipleConnectPoorRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultipleConnectPoorRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultipleConnectPoorRes* internal_default_instance() {
    return reinterpret_cast<const MultipleConnectPoorRes*>(
               &_MultipleConnectPoorRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MultipleConnectPoorRes& a, MultipleConnectPoorRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleConnectPoorRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipleConnectPoorRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultipleConnectPoorRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultipleConnectPoorRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultipleConnectPoorRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MultipleConnectPoorRes& from) {
    MultipleConnectPoorRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MultipleConnectPoorRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.MultipleConnectPoorRes";
  }
  protected:
  explicit MultipleConnectPoorRes(::google::protobuf::Arena* arena);
  MultipleConnectPoorRes(::google::protobuf::Arena* arena, const MultipleConnectPoorRes& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectPoolsFieldNumber = 2,
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // repeated .rpc_server.ConnectPool connect_pools = 2;
  int connect_pools_size() const;
  private:
  int _internal_connect_pools_size() const;

  public:
  void clear_connect_pools() ;
  ::rpc_server::ConnectPool* mutable_connect_pools(int index);
  ::google::protobuf::RepeatedPtrField< ::rpc_server::ConnectPool >*
      mutable_connect_pools();
  private:
  const ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectPool>& _internal_connect_pools() const;
  ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectPool>* _internal_mutable_connect_pools();
  public:
  const ::rpc_server::ConnectPool& connect_pools(int index) const;
  ::rpc_server::ConnectPool* add_connect_pools();
  const ::google::protobuf::RepeatedPtrField< ::rpc_server::ConnectPool >&
      connect_pools() const;
  // bytes message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.MultipleConnectPoorRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::rpc_server::ConnectPool > connect_pools_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fcentral_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RegisterServerReq

// int32 server_type = 1;
inline void RegisterServerReq::clear_server_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_type_ = 0;
}
inline ::int32_t RegisterServerReq::server_type() const {
  // @@protoc_insertion_point(field_get:rpc_server.RegisterServerReq.server_type)
  return _internal_server_type();
}
inline void RegisterServerReq::set_server_type(::int32_t value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:rpc_server.RegisterServerReq.server_type)
}
inline ::int32_t RegisterServerReq::_internal_server_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_type_;
}
inline void RegisterServerReq::_internal_set_server_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_type_ = value;
}

// bytes address = 2;
inline void RegisterServerReq::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& RegisterServerReq::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.RegisterServerReq.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterServerReq::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.RegisterServerReq.address)
}
inline std::string* RegisterServerReq::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:rpc_server.RegisterServerReq.address)
  return _s;
}
inline const std::string& RegisterServerReq::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void RegisterServerReq::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArena());
}
inline std::string* RegisterServerReq::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* RegisterServerReq::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.RegisterServerReq.address)
  return _impl_.address_.Release();
}
inline void RegisterServerReq::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.RegisterServerReq.address)
}

// bytes port = 3;
inline void RegisterServerReq::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.ClearToEmpty();
}
inline const std::string& RegisterServerReq::port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.RegisterServerReq.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterServerReq::set_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.RegisterServerReq.port)
}
inline std::string* RegisterServerReq::mutable_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:rpc_server.RegisterServerReq.port)
  return _s;
}
inline const std::string& RegisterServerReq::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_.Get();
}
inline void RegisterServerReq::_internal_set_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.Set(value, GetArena());
}
inline std::string* RegisterServerReq::_internal_mutable_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.port_.Mutable( GetArena());
}
inline std::string* RegisterServerReq::release_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.RegisterServerReq.port)
  return _impl_.port_.Release();
}
inline void RegisterServerReq::set_allocated_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_.IsDefault()) {
          _impl_.port_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.RegisterServerReq.port)
}

// -------------------------------------------------------------------

// RegisterServerRes

// bool success = 1;
inline void RegisterServerRes::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool RegisterServerRes::success() const {
  // @@protoc_insertion_point(field_get:rpc_server.RegisterServerRes.success)
  return _internal_success();
}
inline void RegisterServerRes::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpc_server.RegisterServerRes.success)
}
inline bool RegisterServerRes::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void RegisterServerRes::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// bytes message = 2;
inline void RegisterServerRes::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RegisterServerRes::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.RegisterServerRes.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterServerRes::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.RegisterServerRes.message)
}
inline std::string* RegisterServerRes::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rpc_server.RegisterServerRes.message)
  return _s;
}
inline const std::string& RegisterServerRes::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void RegisterServerRes::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* RegisterServerRes::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* RegisterServerRes::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.RegisterServerRes.message)
  return _impl_.message_.Release();
}
inline void RegisterServerRes::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.RegisterServerRes.message)
}

// -------------------------------------------------------------------

// UnregisterServerReq

// int32 server_type = 1;
inline void UnregisterServerReq::clear_server_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_type_ = 0;
}
inline ::int32_t UnregisterServerReq::server_type() const {
  // @@protoc_insertion_point(field_get:rpc_server.UnregisterServerReq.server_type)
  return _internal_server_type();
}
inline void UnregisterServerReq::set_server_type(::int32_t value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:rpc_server.UnregisterServerReq.server_type)
}
inline ::int32_t UnregisterServerReq::_internal_server_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_type_;
}
inline void UnregisterServerReq::_internal_set_server_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_type_ = value;
}

// bytes address = 2;
inline void UnregisterServerReq::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& UnregisterServerReq::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.UnregisterServerReq.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnregisterServerReq::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.UnregisterServerReq.address)
}
inline std::string* UnregisterServerReq::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:rpc_server.UnregisterServerReq.address)
  return _s;
}
inline const std::string& UnregisterServerReq::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void UnregisterServerReq::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArena());
}
inline std::string* UnregisterServerReq::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* UnregisterServerReq::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.UnregisterServerReq.address)
  return _impl_.address_.Release();
}
inline void UnregisterServerReq::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.UnregisterServerReq.address)
}

// bytes port = 3;
inline void UnregisterServerReq::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.ClearToEmpty();
}
inline const std::string& UnregisterServerReq::port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.UnregisterServerReq.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnregisterServerReq::set_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.UnregisterServerReq.port)
}
inline std::string* UnregisterServerReq::mutable_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:rpc_server.UnregisterServerReq.port)
  return _s;
}
inline const std::string& UnregisterServerReq::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_.Get();
}
inline void UnregisterServerReq::_internal_set_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.Set(value, GetArena());
}
inline std::string* UnregisterServerReq::_internal_mutable_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.port_.Mutable( GetArena());
}
inline std::string* UnregisterServerReq::release_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.UnregisterServerReq.port)
  return _impl_.port_.Release();
}
inline void UnregisterServerReq::set_allocated_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_.IsDefault()) {
          _impl_.port_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.UnregisterServerReq.port)
}

// -------------------------------------------------------------------

// UnregisterServerRes

// bool success = 1;
inline void UnregisterServerRes::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool UnregisterServerRes::success() const {
  // @@protoc_insertion_point(field_get:rpc_server.UnregisterServerRes.success)
  return _internal_success();
}
inline void UnregisterServerRes::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpc_server.UnregisterServerRes.success)
}
inline bool UnregisterServerRes::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void UnregisterServerRes::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// bytes message = 2;
inline void UnregisterServerRes::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UnregisterServerRes::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.UnregisterServerRes.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnregisterServerRes::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.UnregisterServerRes.message)
}
inline std::string* UnregisterServerRes::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rpc_server.UnregisterServerRes.message)
  return _s;
}
inline const std::string& UnregisterServerRes::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void UnregisterServerRes::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* UnregisterServerRes::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* UnregisterServerRes::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.UnregisterServerRes.message)
  return _impl_.message_.Release();
}
inline void UnregisterServerRes::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.UnregisterServerRes.message)
}

// -------------------------------------------------------------------

// MultipleConnectPoorReq

// repeated int32 server_types = 1;
inline int MultipleConnectPoorReq::_internal_server_types_size() const {
  return _internal_server_types().size();
}
inline int MultipleConnectPoorReq::server_types_size() const {
  return _internal_server_types_size();
}
inline void MultipleConnectPoorReq::clear_server_types() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_types_.Clear();
}
inline ::int32_t MultipleConnectPoorReq::server_types(int index) const {
  // @@protoc_insertion_point(field_get:rpc_server.MultipleConnectPoorReq.server_types)
  return _internal_server_types().Get(index);
}
inline void MultipleConnectPoorReq::set_server_types(int index, ::int32_t value) {
  _internal_mutable_server_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:rpc_server.MultipleConnectPoorReq.server_types)
}
inline void MultipleConnectPoorReq::add_server_types(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_server_types()->Add(value);
  // @@protoc_insertion_point(field_add:rpc_server.MultipleConnectPoorReq.server_types)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& MultipleConnectPoorReq::server_types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rpc_server.MultipleConnectPoorReq.server_types)
  return _internal_server_types();
}
inline ::google::protobuf::RepeatedField<::int32_t>* MultipleConnectPoorReq::mutable_server_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rpc_server.MultipleConnectPoorReq.server_types)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_server_types();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& MultipleConnectPoorReq::_internal_server_types()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_types_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* MultipleConnectPoorReq::_internal_mutable_server_types() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.server_types_;
}

// -------------------------------------------------------------------

// MultipleConnectPoorRes

// bool success = 1;
inline void MultipleConnectPoorRes::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool MultipleConnectPoorRes::success() const {
  // @@protoc_insertion_point(field_get:rpc_server.MultipleConnectPoorRes.success)
  return _internal_success();
}
inline void MultipleConnectPoorRes::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpc_server.MultipleConnectPoorRes.success)
}
inline bool MultipleConnectPoorRes::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void MultipleConnectPoorRes::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// repeated .rpc_server.ConnectPool connect_pools = 2;
inline int MultipleConnectPoorRes::_internal_connect_pools_size() const {
  return _internal_connect_pools().size();
}
inline int MultipleConnectPoorRes::connect_pools_size() const {
  return _internal_connect_pools_size();
}
inline void MultipleConnectPoorRes::clear_connect_pools() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.connect_pools_.Clear();
}
inline ::rpc_server::ConnectPool* MultipleConnectPoorRes::mutable_connect_pools(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rpc_server.MultipleConnectPoorRes.connect_pools)
  return _internal_mutable_connect_pools()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectPool>* MultipleConnectPoorRes::mutable_connect_pools()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rpc_server.MultipleConnectPoorRes.connect_pools)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_connect_pools();
}
inline const ::rpc_server::ConnectPool& MultipleConnectPoorRes::connect_pools(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.MultipleConnectPoorRes.connect_pools)
  return _internal_connect_pools().Get(index);
}
inline ::rpc_server::ConnectPool* MultipleConnectPoorRes::add_connect_pools() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::rpc_server::ConnectPool* _add = _internal_mutable_connect_pools()->Add();
  // @@protoc_insertion_point(field_add:rpc_server.MultipleConnectPoorRes.connect_pools)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectPool>& MultipleConnectPoorRes::connect_pools() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rpc_server.MultipleConnectPoorRes.connect_pools)
  return _internal_connect_pools();
}
inline const ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectPool>&
MultipleConnectPoorRes::_internal_connect_pools() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.connect_pools_;
}
inline ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectPool>*
MultipleConnectPoorRes::_internal_mutable_connect_pools() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.connect_pools_;
}

// bytes message = 3;
inline void MultipleConnectPoorRes::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& MultipleConnectPoorRes::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.MultipleConnectPoorRes.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MultipleConnectPoorRes::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.MultipleConnectPoorRes.message)
}
inline std::string* MultipleConnectPoorRes::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rpc_server.MultipleConnectPoorRes.message)
  return _s;
}
inline const std::string& MultipleConnectPoorRes::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void MultipleConnectPoorRes::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* MultipleConnectPoorRes::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* MultipleConnectPoorRes::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.MultipleConnectPoorRes.message)
  return _impl_.message_.Release();
}
inline void MultipleConnectPoorRes::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.MultipleConnectPoorRes.message)
}

// -------------------------------------------------------------------

// ConnectInfo

// bytes address = 1;
inline void ConnectInfo::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ConnectInfo::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.ConnectInfo.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectInfo::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.ConnectInfo.address)
}
inline std::string* ConnectInfo::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:rpc_server.ConnectInfo.address)
  return _s;
}
inline const std::string& ConnectInfo::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void ConnectInfo::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArena());
}
inline std::string* ConnectInfo::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* ConnectInfo::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.ConnectInfo.address)
  return _impl_.address_.Release();
}
inline void ConnectInfo::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.ConnectInfo.address)
}

// int32 port = 2;
inline void ConnectInfo::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0;
}
inline ::int32_t ConnectInfo::port() const {
  // @@protoc_insertion_point(field_get:rpc_server.ConnectInfo.port)
  return _internal_port();
}
inline void ConnectInfo::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:rpc_server.ConnectInfo.port)
}
inline ::int32_t ConnectInfo::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void ConnectInfo::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// ConnectPool

// int32 server_type = 1;
inline void ConnectPool::clear_server_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_type_ = 0;
}
inline ::int32_t ConnectPool::server_type() const {
  // @@protoc_insertion_point(field_get:rpc_server.ConnectPool.server_type)
  return _internal_server_type();
}
inline void ConnectPool::set_server_type(::int32_t value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:rpc_server.ConnectPool.server_type)
}
inline ::int32_t ConnectPool::_internal_server_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_type_;
}
inline void ConnectPool::_internal_set_server_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_type_ = value;
}

// repeated .rpc_server.ConnectInfo connect_info = 2;
inline int ConnectPool::_internal_connect_info_size() const {
  return _internal_connect_info().size();
}
inline int ConnectPool::connect_info_size() const {
  return _internal_connect_info_size();
}
inline void ConnectPool::clear_connect_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.connect_info_.Clear();
}
inline ::rpc_server::ConnectInfo* ConnectPool::mutable_connect_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rpc_server.ConnectPool.connect_info)
  return _internal_mutable_connect_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectInfo>* ConnectPool::mutable_connect_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rpc_server.ConnectPool.connect_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_connect_info();
}
inline const ::rpc_server::ConnectInfo& ConnectPool::connect_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.ConnectPool.connect_info)
  return _internal_connect_info().Get(index);
}
inline ::rpc_server::ConnectInfo* ConnectPool::add_connect_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::rpc_server::ConnectInfo* _add = _internal_mutable_connect_info()->Add();
  // @@protoc_insertion_point(field_add:rpc_server.ConnectPool.connect_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectInfo>& ConnectPool::connect_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rpc_server.ConnectPool.connect_info)
  return _internal_connect_info();
}
inline const ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectInfo>&
ConnectPool::_internal_connect_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.connect_info_;
}
inline ::google::protobuf::RepeatedPtrField<::rpc_server::ConnectInfo>*
ConnectPool::_internal_mutable_connect_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.connect_info_;
}

// -------------------------------------------------------------------

// HeartbeatReq

// int32 server_type = 1;
inline void HeartbeatReq::clear_server_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_type_ = 0;
}
inline ::int32_t HeartbeatReq::server_type() const {
  // @@protoc_insertion_point(field_get:rpc_server.HeartbeatReq.server_type)
  return _internal_server_type();
}
inline void HeartbeatReq::set_server_type(::int32_t value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:rpc_server.HeartbeatReq.server_type)
}
inline ::int32_t HeartbeatReq::_internal_server_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_type_;
}
inline void HeartbeatReq::_internal_set_server_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_type_ = value;
}

// bytes address = 2;
inline void HeartbeatReq::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& HeartbeatReq::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.HeartbeatReq.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeartbeatReq::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.HeartbeatReq.address)
}
inline std::string* HeartbeatReq::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:rpc_server.HeartbeatReq.address)
  return _s;
}
inline const std::string& HeartbeatReq::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void HeartbeatReq::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArena());
}
inline std::string* HeartbeatReq::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* HeartbeatReq::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.HeartbeatReq.address)
  return _impl_.address_.Release();
}
inline void HeartbeatReq::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.HeartbeatReq.address)
}

// bytes port = 3;
inline void HeartbeatReq::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.ClearToEmpty();
}
inline const std::string& HeartbeatReq::port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.HeartbeatReq.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeartbeatReq::set_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.HeartbeatReq.port)
}
inline std::string* HeartbeatReq::mutable_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:rpc_server.HeartbeatReq.port)
  return _s;
}
inline const std::string& HeartbeatReq::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_.Get();
}
inline void HeartbeatReq::_internal_set_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.Set(value, GetArena());
}
inline std::string* HeartbeatReq::_internal_mutable_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.port_.Mutable( GetArena());
}
inline std::string* HeartbeatReq::release_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.HeartbeatReq.port)
  return _impl_.port_.Release();
}
inline void HeartbeatReq::set_allocated_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_.IsDefault()) {
          _impl_.port_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.HeartbeatReq.port)
}

// -------------------------------------------------------------------

// HeartbeatRes

// bool success = 1;
inline void HeartbeatRes::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool HeartbeatRes::success() const {
  // @@protoc_insertion_point(field_get:rpc_server.HeartbeatRes.success)
  return _internal_success();
}
inline void HeartbeatRes::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpc_server.HeartbeatRes.success)
}
inline bool HeartbeatRes::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void HeartbeatRes::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// bytes message = 2;
inline void HeartbeatRes::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& HeartbeatRes::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.HeartbeatRes.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeartbeatRes::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.HeartbeatRes.message)
}
inline std::string* HeartbeatRes::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rpc_server.HeartbeatRes.message)
  return _s;
}
inline const std::string& HeartbeatRes::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void HeartbeatRes::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* HeartbeatRes::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* HeartbeatRes::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.HeartbeatRes.message)
  return _impl_.message_.Release();
}
inline void HeartbeatRes::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.HeartbeatRes.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc_server


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_server_5fcentral_2eproto_2epb_2eh
