// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_battle.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fbattle_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_server_5fbattle_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_server_5fbattle_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fbattle_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_server_5fbattle_2eproto;
namespace rpc_server {
class BattleResult;
struct BattleResultDefaultTypeInternal;
extern BattleResultDefaultTypeInternal _BattleResult_default_instance_;
class GetBattleResultRequest;
struct GetBattleResultRequestDefaultTypeInternal;
extern GetBattleResultRequestDefaultTypeInternal _GetBattleResultRequest_default_instance_;
class GetBattleResultResponse;
struct GetBattleResultResponseDefaultTypeInternal;
extern GetBattleResultResponseDefaultTypeInternal _GetBattleResultResponse_default_instance_;
class PlayerAction;
struct PlayerActionDefaultTypeInternal;
extern PlayerActionDefaultTypeInternal _PlayerAction_default_instance_;
class PlayerActionRequest;
struct PlayerActionRequestDefaultTypeInternal;
extern PlayerActionRequestDefaultTypeInternal _PlayerActionRequest_default_instance_;
class PlayerActionResponse;
struct PlayerActionResponseDefaultTypeInternal;
extern PlayerActionResponseDefaultTypeInternal _PlayerActionResponse_default_instance_;
class SyncBattleStateRequest;
struct SyncBattleStateRequestDefaultTypeInternal;
extern SyncBattleStateRequestDefaultTypeInternal _SyncBattleStateRequest_default_instance_;
class SyncBattleStateResponse;
struct SyncBattleStateResponseDefaultTypeInternal;
extern SyncBattleStateResponseDefaultTypeInternal _SyncBattleStateResponse_default_instance_;
}  // namespace rpc_server
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rpc_server {

// ===================================================================


// -------------------------------------------------------------------

class SyncBattleStateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.SyncBattleStateResponse) */ {
 public:
  inline SyncBattleStateResponse() : SyncBattleStateResponse(nullptr) {}
  ~SyncBattleStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SyncBattleStateResponse(::google::protobuf::internal::ConstantInitialized);

  inline SyncBattleStateResponse(const SyncBattleStateResponse& from)
      : SyncBattleStateResponse(nullptr, from) {}
  SyncBattleStateResponse(SyncBattleStateResponse&& from) noexcept
    : SyncBattleStateResponse() {
    *this = ::std::move(from);
  }

  inline SyncBattleStateResponse& operator=(const SyncBattleStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBattleStateResponse& operator=(SyncBattleStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncBattleStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncBattleStateResponse* internal_default_instance() {
    return reinterpret_cast<const SyncBattleStateResponse*>(
               &_SyncBattleStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SyncBattleStateResponse& a, SyncBattleStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBattleStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncBattleStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncBattleStateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncBattleStateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncBattleStateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SyncBattleStateResponse& from) {
    SyncBattleStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SyncBattleStateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.SyncBattleStateResponse";
  }
  protected:
  explicit SyncBattleStateResponse(::google::protobuf::Arena* arena);
  SyncBattleStateResponse(::google::protobuf::Arena* arena, const SyncBattleStateResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStateDataFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string state_data = 3;
  void clear_state_data() ;
  const std::string& state_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state_data(Arg_&& arg, Args_... args);
  std::string* mutable_state_data();
  PROTOBUF_NODISCARD std::string* release_state_data();
  void set_allocated_state_data(std::string* value);

  private:
  const std::string& _internal_state_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_data(
      const std::string& value);
  std::string* _internal_mutable_state_data();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.SyncBattleStateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr state_data_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fbattle_2eproto;
};// -------------------------------------------------------------------

class SyncBattleStateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.SyncBattleStateRequest) */ {
 public:
  inline SyncBattleStateRequest() : SyncBattleStateRequest(nullptr) {}
  ~SyncBattleStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SyncBattleStateRequest(::google::protobuf::internal::ConstantInitialized);

  inline SyncBattleStateRequest(const SyncBattleStateRequest& from)
      : SyncBattleStateRequest(nullptr, from) {}
  SyncBattleStateRequest(SyncBattleStateRequest&& from) noexcept
    : SyncBattleStateRequest() {
    *this = ::std::move(from);
  }

  inline SyncBattleStateRequest& operator=(const SyncBattleStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBattleStateRequest& operator=(SyncBattleStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncBattleStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncBattleStateRequest* internal_default_instance() {
    return reinterpret_cast<const SyncBattleStateRequest*>(
               &_SyncBattleStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SyncBattleStateRequest& a, SyncBattleStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBattleStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncBattleStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncBattleStateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncBattleStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncBattleStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SyncBattleStateRequest& from) {
    SyncBattleStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SyncBattleStateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.SyncBattleStateRequest";
  }
  protected:
  explicit SyncBattleStateRequest(::google::protobuf::Arena* arena);
  SyncBattleStateRequest(::google::protobuf::Arena* arena, const SyncBattleStateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateDataFieldNumber = 2,
    kBattleIdFieldNumber = 1,
  };
  // string state_data = 2;
  void clear_state_data() ;
  const std::string& state_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state_data(Arg_&& arg, Args_... args);
  std::string* mutable_state_data();
  PROTOBUF_NODISCARD std::string* release_state_data();
  void set_allocated_state_data(std::string* value);

  private:
  const std::string& _internal_state_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_data(
      const std::string& value);
  std::string* _internal_mutable_state_data();

  public:
  // int32 battle_id = 1;
  void clear_battle_id() ;
  ::int32_t battle_id() const;
  void set_battle_id(::int32_t value);

  private:
  ::int32_t _internal_battle_id() const;
  void _internal_set_battle_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.SyncBattleStateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr state_data_;
    ::int32_t battle_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fbattle_2eproto;
};// -------------------------------------------------------------------

class PlayerActionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.PlayerActionResponse) */ {
 public:
  inline PlayerActionResponse() : PlayerActionResponse(nullptr) {}
  ~PlayerActionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerActionResponse(::google::protobuf::internal::ConstantInitialized);

  inline PlayerActionResponse(const PlayerActionResponse& from)
      : PlayerActionResponse(nullptr, from) {}
  PlayerActionResponse(PlayerActionResponse&& from) noexcept
    : PlayerActionResponse() {
    *this = ::std::move(from);
  }

  inline PlayerActionResponse& operator=(const PlayerActionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerActionResponse& operator=(PlayerActionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerActionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerActionResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerActionResponse*>(
               &_PlayerActionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerActionResponse& a, PlayerActionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerActionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerActionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerActionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerActionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerActionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PlayerActionResponse& from) {
    PlayerActionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerActionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.PlayerActionResponse";
  }
  protected:
  explicit PlayerActionResponse(::google::protobuf::Arena* arena);
  PlayerActionResponse(::google::protobuf::Arena* arena, const PlayerActionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.PlayerActionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fbattle_2eproto;
};// -------------------------------------------------------------------

class PlayerAction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.PlayerAction) */ {
 public:
  inline PlayerAction() : PlayerAction(nullptr) {}
  ~PlayerAction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerAction(::google::protobuf::internal::ConstantInitialized);

  inline PlayerAction(const PlayerAction& from)
      : PlayerAction(nullptr, from) {}
  PlayerAction(PlayerAction&& from) noexcept
    : PlayerAction() {
    *this = ::std::move(from);
  }

  inline PlayerAction& operator=(const PlayerAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAction& operator=(PlayerAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerAction* internal_default_instance() {
    return reinterpret_cast<const PlayerAction*>(
               &_PlayerAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerAction& a, PlayerAction& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PlayerAction& from) {
    PlayerAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerAction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.PlayerAction";
  }
  protected:
  explicit PlayerAction(::google::protobuf::Arena* arena);
  PlayerAction(::google::protobuf::Arena* arena, const PlayerAction& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionTypeFieldNumber = 2,
    kActionDataFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // string action_type = 2;
  void clear_action_type() ;
  const std::string& action_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_type(Arg_&& arg, Args_... args);
  std::string* mutable_action_type();
  PROTOBUF_NODISCARD std::string* release_action_type();
  void set_allocated_action_type(std::string* value);

  private:
  const std::string& _internal_action_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_type(
      const std::string& value);
  std::string* _internal_mutable_action_type();

  public:
  // string action_data = 3;
  void clear_action_data() ;
  const std::string& action_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_data(Arg_&& arg, Args_... args);
  std::string* mutable_action_data();
  PROTOBUF_NODISCARD std::string* release_action_data();
  void set_allocated_action_data(std::string* value);

  private:
  const std::string& _internal_action_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_data(
      const std::string& value);
  std::string* _internal_mutable_action_data();

  public:
  // int32 player_id = 1;
  void clear_player_id() ;
  ::int32_t player_id() const;
  void set_player_id(::int32_t value);

  private:
  ::int32_t _internal_player_id() const;
  void _internal_set_player_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.PlayerAction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr action_type_;
    ::google::protobuf::internal::ArenaStringPtr action_data_;
    ::int32_t player_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fbattle_2eproto;
};// -------------------------------------------------------------------

class GetBattleResultRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.GetBattleResultRequest) */ {
 public:
  inline GetBattleResultRequest() : GetBattleResultRequest(nullptr) {}
  ~GetBattleResultRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBattleResultRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetBattleResultRequest(const GetBattleResultRequest& from)
      : GetBattleResultRequest(nullptr, from) {}
  GetBattleResultRequest(GetBattleResultRequest&& from) noexcept
    : GetBattleResultRequest() {
    *this = ::std::move(from);
  }

  inline GetBattleResultRequest& operator=(const GetBattleResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBattleResultRequest& operator=(GetBattleResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBattleResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBattleResultRequest* internal_default_instance() {
    return reinterpret_cast<const GetBattleResultRequest*>(
               &_GetBattleResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBattleResultRequest& a, GetBattleResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBattleResultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBattleResultRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBattleResultRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBattleResultRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBattleResultRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBattleResultRequest& from) {
    GetBattleResultRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBattleResultRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.GetBattleResultRequest";
  }
  protected:
  explicit GetBattleResultRequest(::google::protobuf::Arena* arena);
  GetBattleResultRequest(::google::protobuf::Arena* arena, const GetBattleResultRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleIdFieldNumber = 1,
  };
  // int32 battle_id = 1;
  void clear_battle_id() ;
  ::int32_t battle_id() const;
  void set_battle_id(::int32_t value);

  private:
  ::int32_t _internal_battle_id() const;
  void _internal_set_battle_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.GetBattleResultRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t battle_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fbattle_2eproto;
};// -------------------------------------------------------------------

class BattleResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.BattleResult) */ {
 public:
  inline BattleResult() : BattleResult(nullptr) {}
  ~BattleResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BattleResult(::google::protobuf::internal::ConstantInitialized);

  inline BattleResult(const BattleResult& from)
      : BattleResult(nullptr, from) {}
  BattleResult(BattleResult&& from) noexcept
    : BattleResult() {
    *this = ::std::move(from);
  }

  inline BattleResult& operator=(const BattleResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleResult& operator=(BattleResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleResult* internal_default_instance() {
    return reinterpret_cast<const BattleResult*>(
               &_BattleResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BattleResult& a, BattleResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BattleResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BattleResult& from) {
    BattleResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BattleResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.BattleResult";
  }
  protected:
  explicit BattleResult(::google::protobuf::Arena* arena);
  BattleResult(::google::protobuf::Arena* arena, const BattleResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultDataFieldNumber = 3,
    kWinnerIdFieldNumber = 1,
    kLoserIdFieldNumber = 2,
  };
  // string result_data = 3;
  void clear_result_data() ;
  const std::string& result_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_data(Arg_&& arg, Args_... args);
  std::string* mutable_result_data();
  PROTOBUF_NODISCARD std::string* release_result_data();
  void set_allocated_result_data(std::string* value);

  private:
  const std::string& _internal_result_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_data(
      const std::string& value);
  std::string* _internal_mutable_result_data();

  public:
  // int32 winner_id = 1;
  void clear_winner_id() ;
  ::int32_t winner_id() const;
  void set_winner_id(::int32_t value);

  private:
  ::int32_t _internal_winner_id() const;
  void _internal_set_winner_id(::int32_t value);

  public:
  // int32 loser_id = 2;
  void clear_loser_id() ;
  ::int32_t loser_id() const;
  void set_loser_id(::int32_t value);

  private:
  ::int32_t _internal_loser_id() const;
  void _internal_set_loser_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.BattleResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr result_data_;
    ::int32_t winner_id_;
    ::int32_t loser_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fbattle_2eproto;
};// -------------------------------------------------------------------

class PlayerActionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.PlayerActionRequest) */ {
 public:
  inline PlayerActionRequest() : PlayerActionRequest(nullptr) {}
  ~PlayerActionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerActionRequest(::google::protobuf::internal::ConstantInitialized);

  inline PlayerActionRequest(const PlayerActionRequest& from)
      : PlayerActionRequest(nullptr, from) {}
  PlayerActionRequest(PlayerActionRequest&& from) noexcept
    : PlayerActionRequest() {
    *this = ::std::move(from);
  }

  inline PlayerActionRequest& operator=(const PlayerActionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerActionRequest& operator=(PlayerActionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerActionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerActionRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerActionRequest*>(
               &_PlayerActionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerActionRequest& a, PlayerActionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerActionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerActionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerActionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerActionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerActionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PlayerActionRequest& from) {
    PlayerActionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerActionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.PlayerActionRequest";
  }
  protected:
  explicit PlayerActionRequest(::google::protobuf::Arena* arena);
  PlayerActionRequest(::google::protobuf::Arena* arena, const PlayerActionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // .rpc_server.PlayerAction action = 1;
  bool has_action() const;
  void clear_action() ;
  const ::rpc_server::PlayerAction& action() const;
  PROTOBUF_NODISCARD ::rpc_server::PlayerAction* release_action();
  ::rpc_server::PlayerAction* mutable_action();
  void set_allocated_action(::rpc_server::PlayerAction* value);
  void unsafe_arena_set_allocated_action(::rpc_server::PlayerAction* value);
  ::rpc_server::PlayerAction* unsafe_arena_release_action();

  private:
  const ::rpc_server::PlayerAction& _internal_action() const;
  ::rpc_server::PlayerAction* _internal_mutable_action();

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.PlayerActionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::rpc_server::PlayerAction* action_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fbattle_2eproto;
};// -------------------------------------------------------------------

class GetBattleResultResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc_server.GetBattleResultResponse) */ {
 public:
  inline GetBattleResultResponse() : GetBattleResultResponse(nullptr) {}
  ~GetBattleResultResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBattleResultResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetBattleResultResponse(const GetBattleResultResponse& from)
      : GetBattleResultResponse(nullptr, from) {}
  GetBattleResultResponse(GetBattleResultResponse&& from) noexcept
    : GetBattleResultResponse() {
    *this = ::std::move(from);
  }

  inline GetBattleResultResponse& operator=(const GetBattleResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBattleResultResponse& operator=(GetBattleResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBattleResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBattleResultResponse* internal_default_instance() {
    return reinterpret_cast<const GetBattleResultResponse*>(
               &_GetBattleResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetBattleResultResponse& a, GetBattleResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBattleResultResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBattleResultResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBattleResultResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBattleResultResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetBattleResultResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetBattleResultResponse& from) {
    GetBattleResultResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetBattleResultResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rpc_server.GetBattleResultResponse";
  }
  protected:
  explicit GetBattleResultResponse(::google::protobuf::Arena* arena);
  GetBattleResultResponse(::google::protobuf::Arena* arena, const GetBattleResultResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .rpc_server.BattleResult result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::rpc_server::BattleResult& result() const;
  PROTOBUF_NODISCARD ::rpc_server::BattleResult* release_result();
  ::rpc_server::BattleResult* mutable_result();
  void set_allocated_result(::rpc_server::BattleResult* value);
  void unsafe_arena_set_allocated_result(::rpc_server::BattleResult* value);
  ::rpc_server::BattleResult* unsafe_arena_release_result();

  private:
  const ::rpc_server::BattleResult& _internal_result() const;
  ::rpc_server::BattleResult* _internal_mutable_result();

  public:
  // @@protoc_insertion_point(class_scope:rpc_server.GetBattleResultResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::rpc_server::BattleResult* result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fbattle_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlayerAction

// int32 player_id = 1;
inline void PlayerAction::clear_player_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_id_ = 0;
}
inline ::int32_t PlayerAction::player_id() const {
  // @@protoc_insertion_point(field_get:rpc_server.PlayerAction.player_id)
  return _internal_player_id();
}
inline void PlayerAction::set_player_id(::int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:rpc_server.PlayerAction.player_id)
}
inline ::int32_t PlayerAction::_internal_player_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_id_;
}
inline void PlayerAction::_internal_set_player_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.player_id_ = value;
}

// string action_type = 2;
inline void PlayerAction::clear_action_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.action_type_.ClearToEmpty();
}
inline const std::string& PlayerAction::action_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.PlayerAction.action_type)
  return _internal_action_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerAction::set_action_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.action_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.PlayerAction.action_type)
}
inline std::string* PlayerAction::mutable_action_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_type();
  // @@protoc_insertion_point(field_mutable:rpc_server.PlayerAction.action_type)
  return _s;
}
inline const std::string& PlayerAction::_internal_action_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.action_type_.Get();
}
inline void PlayerAction::_internal_set_action_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.action_type_.Set(value, GetArena());
}
inline std::string* PlayerAction::_internal_mutable_action_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.action_type_.Mutable( GetArena());
}
inline std::string* PlayerAction::release_action_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.PlayerAction.action_type)
  return _impl_.action_type_.Release();
}
inline void PlayerAction::set_allocated_action_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.action_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.action_type_.IsDefault()) {
          _impl_.action_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.PlayerAction.action_type)
}

// string action_data = 3;
inline void PlayerAction::clear_action_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.action_data_.ClearToEmpty();
}
inline const std::string& PlayerAction::action_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.PlayerAction.action_data)
  return _internal_action_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerAction::set_action_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.action_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.PlayerAction.action_data)
}
inline std::string* PlayerAction::mutable_action_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_data();
  // @@protoc_insertion_point(field_mutable:rpc_server.PlayerAction.action_data)
  return _s;
}
inline const std::string& PlayerAction::_internal_action_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.action_data_.Get();
}
inline void PlayerAction::_internal_set_action_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.action_data_.Set(value, GetArena());
}
inline std::string* PlayerAction::_internal_mutable_action_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.action_data_.Mutable( GetArena());
}
inline std::string* PlayerAction::release_action_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.PlayerAction.action_data)
  return _impl_.action_data_.Release();
}
inline void PlayerAction::set_allocated_action_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.action_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.action_data_.IsDefault()) {
          _impl_.action_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.PlayerAction.action_data)
}

// -------------------------------------------------------------------

// BattleResult

// int32 winner_id = 1;
inline void BattleResult::clear_winner_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.winner_id_ = 0;
}
inline ::int32_t BattleResult::winner_id() const {
  // @@protoc_insertion_point(field_get:rpc_server.BattleResult.winner_id)
  return _internal_winner_id();
}
inline void BattleResult::set_winner_id(::int32_t value) {
  _internal_set_winner_id(value);
  // @@protoc_insertion_point(field_set:rpc_server.BattleResult.winner_id)
}
inline ::int32_t BattleResult::_internal_winner_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.winner_id_;
}
inline void BattleResult::_internal_set_winner_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.winner_id_ = value;
}

// int32 loser_id = 2;
inline void BattleResult::clear_loser_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.loser_id_ = 0;
}
inline ::int32_t BattleResult::loser_id() const {
  // @@protoc_insertion_point(field_get:rpc_server.BattleResult.loser_id)
  return _internal_loser_id();
}
inline void BattleResult::set_loser_id(::int32_t value) {
  _internal_set_loser_id(value);
  // @@protoc_insertion_point(field_set:rpc_server.BattleResult.loser_id)
}
inline ::int32_t BattleResult::_internal_loser_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.loser_id_;
}
inline void BattleResult::_internal_set_loser_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.loser_id_ = value;
}

// string result_data = 3;
inline void BattleResult::clear_result_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_data_.ClearToEmpty();
}
inline const std::string& BattleResult::result_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.BattleResult.result_data)
  return _internal_result_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BattleResult::set_result_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.BattleResult.result_data)
}
inline std::string* BattleResult::mutable_result_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_data();
  // @@protoc_insertion_point(field_mutable:rpc_server.BattleResult.result_data)
  return _s;
}
inline const std::string& BattleResult::_internal_result_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.result_data_.Get();
}
inline void BattleResult::_internal_set_result_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_data_.Set(value, GetArena());
}
inline std::string* BattleResult::_internal_mutable_result_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.result_data_.Mutable( GetArena());
}
inline std::string* BattleResult::release_result_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.BattleResult.result_data)
  return _impl_.result_data_.Release();
}
inline void BattleResult::set_allocated_result_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_data_.IsDefault()) {
          _impl_.result_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.BattleResult.result_data)
}

// -------------------------------------------------------------------

// PlayerActionRequest

// .rpc_server.PlayerAction action = 1;
inline bool PlayerActionRequest::has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.action_ != nullptr);
  return value;
}
inline void PlayerActionRequest::clear_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.action_ != nullptr) _impl_.action_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::rpc_server::PlayerAction& PlayerActionRequest::_internal_action() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::rpc_server::PlayerAction* p = _impl_.action_;
  return p != nullptr ? *p : reinterpret_cast<const ::rpc_server::PlayerAction&>(::rpc_server::_PlayerAction_default_instance_);
}
inline const ::rpc_server::PlayerAction& PlayerActionRequest::action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.PlayerActionRequest.action)
  return _internal_action();
}
inline void PlayerActionRequest::unsafe_arena_set_allocated_action(::rpc_server::PlayerAction* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.action_);
  }
  _impl_.action_ = reinterpret_cast<::rpc_server::PlayerAction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc_server.PlayerActionRequest.action)
}
inline ::rpc_server::PlayerAction* PlayerActionRequest::release_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rpc_server::PlayerAction* released = _impl_.action_;
  _impl_.action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::rpc_server::PlayerAction* PlayerActionRequest::unsafe_arena_release_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.PlayerActionRequest.action)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rpc_server::PlayerAction* temp = _impl_.action_;
  _impl_.action_ = nullptr;
  return temp;
}
inline ::rpc_server::PlayerAction* PlayerActionRequest::_internal_mutable_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.action_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_server::PlayerAction>(GetArena());
    _impl_.action_ = reinterpret_cast<::rpc_server::PlayerAction*>(p);
  }
  return _impl_.action_;
}
inline ::rpc_server::PlayerAction* PlayerActionRequest::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::rpc_server::PlayerAction* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:rpc_server.PlayerActionRequest.action)
  return _msg;
}
inline void PlayerActionRequest::set_allocated_action(::rpc_server::PlayerAction* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::rpc_server::PlayerAction*>(_impl_.action_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::rpc_server::PlayerAction*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.action_ = reinterpret_cast<::rpc_server::PlayerAction*>(value);
  // @@protoc_insertion_point(field_set_allocated:rpc_server.PlayerActionRequest.action)
}

// -------------------------------------------------------------------

// PlayerActionResponse

// bool success = 1;
inline void PlayerActionResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool PlayerActionResponse::success() const {
  // @@protoc_insertion_point(field_get:rpc_server.PlayerActionResponse.success)
  return _internal_success();
}
inline void PlayerActionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpc_server.PlayerActionResponse.success)
}
inline bool PlayerActionResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void PlayerActionResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string message = 2;
inline void PlayerActionResponse::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PlayerActionResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.PlayerActionResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerActionResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.PlayerActionResponse.message)
}
inline std::string* PlayerActionResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rpc_server.PlayerActionResponse.message)
  return _s;
}
inline const std::string& PlayerActionResponse::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void PlayerActionResponse::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PlayerActionResponse::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PlayerActionResponse::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.PlayerActionResponse.message)
  return _impl_.message_.Release();
}
inline void PlayerActionResponse::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.PlayerActionResponse.message)
}

// -------------------------------------------------------------------

// GetBattleResultRequest

// int32 battle_id = 1;
inline void GetBattleResultRequest::clear_battle_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.battle_id_ = 0;
}
inline ::int32_t GetBattleResultRequest::battle_id() const {
  // @@protoc_insertion_point(field_get:rpc_server.GetBattleResultRequest.battle_id)
  return _internal_battle_id();
}
inline void GetBattleResultRequest::set_battle_id(::int32_t value) {
  _internal_set_battle_id(value);
  // @@protoc_insertion_point(field_set:rpc_server.GetBattleResultRequest.battle_id)
}
inline ::int32_t GetBattleResultRequest::_internal_battle_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.battle_id_;
}
inline void GetBattleResultRequest::_internal_set_battle_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.battle_id_ = value;
}

// -------------------------------------------------------------------

// GetBattleResultResponse

// .rpc_server.BattleResult result = 1;
inline bool GetBattleResultResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline void GetBattleResultResponse::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::rpc_server::BattleResult& GetBattleResultResponse::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::rpc_server::BattleResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::rpc_server::BattleResult&>(::rpc_server::_BattleResult_default_instance_);
}
inline const ::rpc_server::BattleResult& GetBattleResultResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.GetBattleResultResponse.result)
  return _internal_result();
}
inline void GetBattleResultResponse::unsafe_arena_set_allocated_result(::rpc_server::BattleResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::rpc_server::BattleResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc_server.GetBattleResultResponse.result)
}
inline ::rpc_server::BattleResult* GetBattleResultResponse::release_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rpc_server::BattleResult* released = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::rpc_server::BattleResult* GetBattleResultResponse::unsafe_arena_release_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.GetBattleResultResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rpc_server::BattleResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::rpc_server::BattleResult* GetBattleResultResponse::_internal_mutable_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc_server::BattleResult>(GetArena());
    _impl_.result_ = reinterpret_cast<::rpc_server::BattleResult*>(p);
  }
  return _impl_.result_;
}
inline ::rpc_server::BattleResult* GetBattleResultResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::rpc_server::BattleResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:rpc_server.GetBattleResultResponse.result)
  return _msg;
}
inline void GetBattleResultResponse::set_allocated_result(::rpc_server::BattleResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::rpc_server::BattleResult*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::rpc_server::BattleResult*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::rpc_server::BattleResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:rpc_server.GetBattleResultResponse.result)
}

// -------------------------------------------------------------------

// SyncBattleStateRequest

// int32 battle_id = 1;
inline void SyncBattleStateRequest::clear_battle_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.battle_id_ = 0;
}
inline ::int32_t SyncBattleStateRequest::battle_id() const {
  // @@protoc_insertion_point(field_get:rpc_server.SyncBattleStateRequest.battle_id)
  return _internal_battle_id();
}
inline void SyncBattleStateRequest::set_battle_id(::int32_t value) {
  _internal_set_battle_id(value);
  // @@protoc_insertion_point(field_set:rpc_server.SyncBattleStateRequest.battle_id)
}
inline ::int32_t SyncBattleStateRequest::_internal_battle_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.battle_id_;
}
inline void SyncBattleStateRequest::_internal_set_battle_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.battle_id_ = value;
}

// string state_data = 2;
inline void SyncBattleStateRequest::clear_state_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_data_.ClearToEmpty();
}
inline const std::string& SyncBattleStateRequest::state_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.SyncBattleStateRequest.state_data)
  return _internal_state_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncBattleStateRequest::set_state_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.SyncBattleStateRequest.state_data)
}
inline std::string* SyncBattleStateRequest::mutable_state_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state_data();
  // @@protoc_insertion_point(field_mutable:rpc_server.SyncBattleStateRequest.state_data)
  return _s;
}
inline const std::string& SyncBattleStateRequest::_internal_state_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_data_.Get();
}
inline void SyncBattleStateRequest::_internal_set_state_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_data_.Set(value, GetArena());
}
inline std::string* SyncBattleStateRequest::_internal_mutable_state_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_data_.Mutable( GetArena());
}
inline std::string* SyncBattleStateRequest::release_state_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.SyncBattleStateRequest.state_data)
  return _impl_.state_data_.Release();
}
inline void SyncBattleStateRequest::set_allocated_state_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_data_.IsDefault()) {
          _impl_.state_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.SyncBattleStateRequest.state_data)
}

// -------------------------------------------------------------------

// SyncBattleStateResponse

// bool success = 1;
inline void SyncBattleStateResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool SyncBattleStateResponse::success() const {
  // @@protoc_insertion_point(field_get:rpc_server.SyncBattleStateResponse.success)
  return _internal_success();
}
inline void SyncBattleStateResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpc_server.SyncBattleStateResponse.success)
}
inline bool SyncBattleStateResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void SyncBattleStateResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string message = 2;
inline void SyncBattleStateResponse::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SyncBattleStateResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.SyncBattleStateResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncBattleStateResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.SyncBattleStateResponse.message)
}
inline std::string* SyncBattleStateResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rpc_server.SyncBattleStateResponse.message)
  return _s;
}
inline const std::string& SyncBattleStateResponse::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void SyncBattleStateResponse::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* SyncBattleStateResponse::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* SyncBattleStateResponse::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.SyncBattleStateResponse.message)
  return _impl_.message_.Release();
}
inline void SyncBattleStateResponse::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.SyncBattleStateResponse.message)
}

// string state_data = 3;
inline void SyncBattleStateResponse::clear_state_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_data_.ClearToEmpty();
}
inline const std::string& SyncBattleStateResponse::state_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc_server.SyncBattleStateResponse.state_data)
  return _internal_state_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncBattleStateResponse::set_state_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc_server.SyncBattleStateResponse.state_data)
}
inline std::string* SyncBattleStateResponse::mutable_state_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state_data();
  // @@protoc_insertion_point(field_mutable:rpc_server.SyncBattleStateResponse.state_data)
  return _s;
}
inline const std::string& SyncBattleStateResponse::_internal_state_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_data_.Get();
}
inline void SyncBattleStateResponse::_internal_set_state_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_data_.Set(value, GetArena());
}
inline std::string* SyncBattleStateResponse::_internal_mutable_state_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_data_.Mutable( GetArena());
}
inline std::string* SyncBattleStateResponse::release_state_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rpc_server.SyncBattleStateResponse.state_data)
  return _impl_.state_data_.Release();
}
inline void SyncBattleStateResponse::set_allocated_state_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_data_.IsDefault()) {
          _impl_.state_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc_server.SyncBattleStateResponse.state_data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc_server


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_server_5fbattle_2eproto_2epb_2eh
