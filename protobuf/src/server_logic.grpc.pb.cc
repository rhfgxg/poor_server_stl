// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_logic.proto

#include "server_logic.pb.h"
#include "server_logic.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace rpc_server {

static const char* LogicServer_method_names[] = {
  "/rpc_server.LogicServer/Process_gameAction",
  "/rpc_server.LogicServer/Get_game_state",
};

std::unique_ptr< LogicServer::Stub> LogicServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LogicServer::Stub> stub(new LogicServer::Stub(channel, options));
  return stub;
}

LogicServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Process_gameAction_(LogicServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_game_state_(LogicServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LogicServer::Stub::Process_gameAction(::grpc::ClientContext* context, const ::rpc_server::GameActionReq& request, ::rpc_server::GameActionRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::GameActionReq, ::rpc_server::GameActionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Process_gameAction_, context, request, response);
}

void LogicServer::Stub::async::Process_gameAction(::grpc::ClientContext* context, const ::rpc_server::GameActionReq* request, ::rpc_server::GameActionRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::GameActionReq, ::rpc_server::GameActionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Process_gameAction_, context, request, response, std::move(f));
}

void LogicServer::Stub::async::Process_gameAction(::grpc::ClientContext* context, const ::rpc_server::GameActionReq* request, ::rpc_server::GameActionRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Process_gameAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::GameActionRes>* LogicServer::Stub::PrepareAsyncProcess_gameActionRaw(::grpc::ClientContext* context, const ::rpc_server::GameActionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::GameActionRes, ::rpc_server::GameActionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Process_gameAction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::GameActionRes>* LogicServer::Stub::AsyncProcess_gameActionRaw(::grpc::ClientContext* context, const ::rpc_server::GameActionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcess_gameActionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LogicServer::Stub::Get_game_state(::grpc::ClientContext* context, const ::rpc_server::GameStateReq& request, ::rpc_server::GameStateRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc_server::GameStateReq, ::rpc_server::GameStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_game_state_, context, request, response);
}

void LogicServer::Stub::async::Get_game_state(::grpc::ClientContext* context, const ::rpc_server::GameStateReq* request, ::rpc_server::GameStateRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc_server::GameStateReq, ::rpc_server::GameStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_game_state_, context, request, response, std::move(f));
}

void LogicServer::Stub::async::Get_game_state(::grpc::ClientContext* context, const ::rpc_server::GameStateReq* request, ::rpc_server::GameStateRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_game_state_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::GameStateRes>* LogicServer::Stub::PrepareAsyncGet_game_stateRaw(::grpc::ClientContext* context, const ::rpc_server::GameStateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc_server::GameStateRes, ::rpc_server::GameStateReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_game_state_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc_server::GameStateRes>* LogicServer::Stub::AsyncGet_game_stateRaw(::grpc::ClientContext* context, const ::rpc_server::GameStateReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGet_game_stateRaw(context, request, cq);
  result->StartCall();
  return result;
}

LogicServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogicServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogicServer::Service, ::rpc_server::GameActionReq, ::rpc_server::GameActionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LogicServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::GameActionReq* req,
             ::rpc_server::GameActionRes* resp) {
               return service->Process_gameAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LogicServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LogicServer::Service, ::rpc_server::GameStateReq, ::rpc_server::GameStateRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LogicServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc_server::GameStateReq* req,
             ::rpc_server::GameStateRes* resp) {
               return service->Get_game_state(ctx, req, resp);
             }, this)));
}

LogicServer::Service::~Service() {
}

::grpc::Status LogicServer::Service::Process_gameAction(::grpc::ServerContext* context, const ::rpc_server::GameActionReq* request, ::rpc_server::GameActionRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LogicServer::Service::Get_game_state(::grpc::ServerContext* context, const ::rpc_server::GameStateReq* request, ::rpc_server::GameStateRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc_server

