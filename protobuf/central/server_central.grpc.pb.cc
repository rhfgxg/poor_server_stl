// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_central.proto

#include "server_central.pb.h"
#include "server_central.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace myproject {

static const char* CentralService_method_names[] = {
  "/myproject.CentralService/GetGlobalState",
  "/myproject.CentralService/UpdateGlobalState",
};

std::unique_ptr< CentralService::Stub> CentralService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CentralService::Stub> stub(new CentralService::Stub(channel, options));
  return stub;
}

CentralService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetGlobalState_(CentralService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGlobalState_(CentralService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CentralService::Stub::GetGlobalState(::grpc::ClientContext* context, const ::myproject::GlobalStateRequest& request, ::myproject::GlobalStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myproject::GlobalStateRequest, ::myproject::GlobalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGlobalState_, context, request, response);
}

void CentralService::Stub::async::GetGlobalState(::grpc::ClientContext* context, const ::myproject::GlobalStateRequest* request, ::myproject::GlobalStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myproject::GlobalStateRequest, ::myproject::GlobalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGlobalState_, context, request, response, std::move(f));
}

void CentralService::Stub::async::GetGlobalState(::grpc::ClientContext* context, const ::myproject::GlobalStateRequest* request, ::myproject::GlobalStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGlobalState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myproject::GlobalStateResponse>* CentralService::Stub::PrepareAsyncGetGlobalStateRaw(::grpc::ClientContext* context, const ::myproject::GlobalStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myproject::GlobalStateResponse, ::myproject::GlobalStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGlobalState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myproject::GlobalStateResponse>* CentralService::Stub::AsyncGetGlobalStateRaw(::grpc::ClientContext* context, const ::myproject::GlobalStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGlobalStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CentralService::Stub::UpdateGlobalState(::grpc::ClientContext* context, const ::myproject::UpdateGlobalStateRequest& request, ::myproject::UpdateGlobalStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myproject::UpdateGlobalStateRequest, ::myproject::UpdateGlobalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateGlobalState_, context, request, response);
}

void CentralService::Stub::async::UpdateGlobalState(::grpc::ClientContext* context, const ::myproject::UpdateGlobalStateRequest* request, ::myproject::UpdateGlobalStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myproject::UpdateGlobalStateRequest, ::myproject::UpdateGlobalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGlobalState_, context, request, response, std::move(f));
}

void CentralService::Stub::async::UpdateGlobalState(::grpc::ClientContext* context, const ::myproject::UpdateGlobalStateRequest* request, ::myproject::UpdateGlobalStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGlobalState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myproject::UpdateGlobalStateResponse>* CentralService::Stub::PrepareAsyncUpdateGlobalStateRaw(::grpc::ClientContext* context, const ::myproject::UpdateGlobalStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myproject::UpdateGlobalStateResponse, ::myproject::UpdateGlobalStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGlobalState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myproject::UpdateGlobalStateResponse>* CentralService::Stub::AsyncUpdateGlobalStateRaw(::grpc::ClientContext* context, const ::myproject::UpdateGlobalStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGlobalStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

CentralService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralService::Service, ::myproject::GlobalStateRequest, ::myproject::GlobalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myproject::GlobalStateRequest* req,
             ::myproject::GlobalStateResponse* resp) {
               return service->GetGlobalState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CentralService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CentralService::Service, ::myproject::UpdateGlobalStateRequest, ::myproject::UpdateGlobalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CentralService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myproject::UpdateGlobalStateRequest* req,
             ::myproject::UpdateGlobalStateResponse* resp) {
               return service->UpdateGlobalState(ctx, req, resp);
             }, this)));
}

CentralService::Service::~Service() {
}

::grpc::Status CentralService::Service::GetGlobalState(::grpc::ServerContext* context, const ::myproject::GlobalStateRequest* request, ::myproject::GlobalStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CentralService::Service::UpdateGlobalState(::grpc::ServerContext* context, const ::myproject::UpdateGlobalStateRequest* request, ::myproject::UpdateGlobalStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace myproject

