// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_central.proto
#ifndef GRPC_server_5fcentral_2eproto__INCLUDED
#define GRPC_server_5fcentral_2eproto__INCLUDED

#include "server_central.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace rpc_server {

class CentralServer final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc_server.CentralServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::rpc_server::RegisterServerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::RegisterServerRes>> AsyncRegister_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::RegisterServerRes>>(AsyncRegister_serverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::RegisterServerRes>> PrepareAsyncRegister_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::RegisterServerRes>>(PrepareAsyncRegister_serverRaw(context, request, cq));
    }
    // 服务器注册
    virtual ::grpc::Status Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::rpc_server::UnregisterServerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::UnregisterServerRes>> AsyncUnregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::UnregisterServerRes>>(AsyncUnregister_serverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::UnregisterServerRes>> PrepareAsyncUnregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::UnregisterServerRes>>(PrepareAsyncUnregister_serverRaw(context, request, cq));
    }
    // 服务器断开
    virtual ::grpc::Status Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::rpc_server::MultipleConnectPoorRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::MultipleConnectPoorRes>> AsyncGet_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::MultipleConnectPoorRes>>(AsyncGet_connec_poorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::MultipleConnectPoorRes>> PrepareAsyncGet_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::MultipleConnectPoorRes>>(PrepareAsyncGet_connec_poorRaw(context, request, cq));
    }
    // 获取多个连接池信息
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::rpc_server::HeartbeatRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::HeartbeatRes>> AsyncHeartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::HeartbeatRes>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::HeartbeatRes>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::HeartbeatRes>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    // 接收心跳包
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 服务器注册
      virtual void Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 服务器断开
      virtual void Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取多个连接池信息
      virtual void Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 接收心跳包
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::RegisterServerRes>* AsyncRegister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::RegisterServerRes>* PrepareAsyncRegister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::UnregisterServerRes>* AsyncUnregister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::UnregisterServerRes>* PrepareAsyncUnregister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::MultipleConnectPoorRes>* AsyncGet_connec_poorRaw(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::MultipleConnectPoorRes>* PrepareAsyncGet_connec_poorRaw(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::HeartbeatRes>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc_server::HeartbeatRes>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::rpc_server::RegisterServerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::RegisterServerRes>> AsyncRegister_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::RegisterServerRes>>(AsyncRegister_serverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::RegisterServerRes>> PrepareAsyncRegister_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::RegisterServerRes>>(PrepareAsyncRegister_serverRaw(context, request, cq));
    }
    ::grpc::Status Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::rpc_server::UnregisterServerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::UnregisterServerRes>> AsyncUnregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::UnregisterServerRes>>(AsyncUnregister_serverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::UnregisterServerRes>> PrepareAsyncUnregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::UnregisterServerRes>>(PrepareAsyncUnregister_serverRaw(context, request, cq));
    }
    ::grpc::Status Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::rpc_server::MultipleConnectPoorRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::MultipleConnectPoorRes>> AsyncGet_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::MultipleConnectPoorRes>>(AsyncGet_connec_poorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::MultipleConnectPoorRes>> PrepareAsyncGet_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::MultipleConnectPoorRes>>(PrepareAsyncGet_connec_poorRaw(context, request, cq));
    }
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::rpc_server::HeartbeatRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::HeartbeatRes>> AsyncHeartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::HeartbeatRes>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::HeartbeatRes>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc_server::HeartbeatRes>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response, std::function<void(::grpc::Status)>) override;
      void Register_server(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response, std::function<void(::grpc::Status)>) override;
      void Unregister_server(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response, std::function<void(::grpc::Status)>) override;
      void Get_connec_poor(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response, std::function<void(::grpc::Status)>) override;
      void Heartbeat(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc_server::RegisterServerRes>* AsyncRegister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::RegisterServerRes>* PrepareAsyncRegister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::RegisterServerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::UnregisterServerRes>* AsyncUnregister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::UnregisterServerRes>* PrepareAsyncUnregister_serverRaw(::grpc::ClientContext* context, const ::rpc_server::UnregisterServerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::MultipleConnectPoorRes>* AsyncGet_connec_poorRaw(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::MultipleConnectPoorRes>* PrepareAsyncGet_connec_poorRaw(::grpc::ClientContext* context, const ::rpc_server::MultipleConnectPoorReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::HeartbeatRes>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc_server::HeartbeatRes>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::rpc_server::HeartbeatReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_server_;
    const ::grpc::internal::RpcMethod rpcmethod_Unregister_server_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_connec_poor_;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Register_server(::grpc::ServerContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response);
    // 服务器注册
    virtual ::grpc::Status Unregister_server(::grpc::ServerContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response);
    // 服务器断开
    virtual ::grpc::Status Get_connec_poor(::grpc::ServerContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response);
    // 获取多个连接池信息
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response);
    // 接收心跳包
  };
  template <class BaseClass>
  class WithAsyncMethod_Register_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register_server() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register_server(::grpc::ServerContext* /*context*/, const ::rpc_server::RegisterServerReq* /*request*/, ::rpc_server::RegisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister_server(::grpc::ServerContext* context, ::rpc_server::RegisterServerReq* request, ::grpc::ServerAsyncResponseWriter< ::rpc_server::RegisterServerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unregister_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unregister_server() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Unregister_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister_server(::grpc::ServerContext* /*context*/, const ::rpc_server::UnregisterServerReq* /*request*/, ::rpc_server::UnregisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregister_server(::grpc::ServerContext* context, ::rpc_server::UnregisterServerReq* request, ::grpc::ServerAsyncResponseWriter< ::rpc_server::UnregisterServerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get_connec_poor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get_connec_poor() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Get_connec_poor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_connec_poor(::grpc::ServerContext* /*context*/, const ::rpc_server::MultipleConnectPoorReq* /*request*/, ::rpc_server::MultipleConnectPoorRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet_connec_poor(::grpc::ServerContext* context, ::rpc_server::MultipleConnectPoorReq* request, ::grpc::ServerAsyncResponseWriter< ::rpc_server::MultipleConnectPoorRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::HeartbeatReq* /*request*/, ::rpc_server::HeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::rpc_server::HeartbeatReq* request, ::grpc::ServerAsyncResponseWriter< ::rpc_server::HeartbeatRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register_server<WithAsyncMethod_Unregister_server<WithAsyncMethod_Get_connec_poor<WithAsyncMethod_Heartbeat<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Register_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register_server() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc_server::RegisterServerReq, ::rpc_server::RegisterServerRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc_server::RegisterServerReq* request, ::rpc_server::RegisterServerRes* response) { return this->Register_server(context, request, response); }));}
    void SetMessageAllocatorFor_Register_server(
        ::grpc::MessageAllocator< ::rpc_server::RegisterServerReq, ::rpc_server::RegisterServerRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc_server::RegisterServerReq, ::rpc_server::RegisterServerRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register_server(::grpc::ServerContext* /*context*/, const ::rpc_server::RegisterServerReq* /*request*/, ::rpc_server::RegisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register_server(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc_server::RegisterServerReq* /*request*/, ::rpc_server::RegisterServerRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Unregister_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Unregister_server() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc_server::UnregisterServerReq, ::rpc_server::UnregisterServerRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc_server::UnregisterServerReq* request, ::rpc_server::UnregisterServerRes* response) { return this->Unregister_server(context, request, response); }));}
    void SetMessageAllocatorFor_Unregister_server(
        ::grpc::MessageAllocator< ::rpc_server::UnregisterServerReq, ::rpc_server::UnregisterServerRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc_server::UnregisterServerReq, ::rpc_server::UnregisterServerRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Unregister_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister_server(::grpc::ServerContext* /*context*/, const ::rpc_server::UnregisterServerReq* /*request*/, ::rpc_server::UnregisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unregister_server(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc_server::UnregisterServerReq* /*request*/, ::rpc_server::UnregisterServerRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get_connec_poor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get_connec_poor() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc_server::MultipleConnectPoorReq, ::rpc_server::MultipleConnectPoorRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc_server::MultipleConnectPoorReq* request, ::rpc_server::MultipleConnectPoorRes* response) { return this->Get_connec_poor(context, request, response); }));}
    void SetMessageAllocatorFor_Get_connec_poor(
        ::grpc::MessageAllocator< ::rpc_server::MultipleConnectPoorReq, ::rpc_server::MultipleConnectPoorRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc_server::MultipleConnectPoorReq, ::rpc_server::MultipleConnectPoorRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get_connec_poor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_connec_poor(::grpc::ServerContext* /*context*/, const ::rpc_server::MultipleConnectPoorReq* /*request*/, ::rpc_server::MultipleConnectPoorRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get_connec_poor(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc_server::MultipleConnectPoorReq* /*request*/, ::rpc_server::MultipleConnectPoorRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc_server::HeartbeatReq, ::rpc_server::HeartbeatRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc_server::HeartbeatReq* request, ::rpc_server::HeartbeatRes* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::MessageAllocator< ::rpc_server::HeartbeatReq, ::rpc_server::HeartbeatRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc_server::HeartbeatReq, ::rpc_server::HeartbeatRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::HeartbeatReq* /*request*/, ::rpc_server::HeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc_server::HeartbeatReq* /*request*/, ::rpc_server::HeartbeatRes* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Register_server<WithCallbackMethod_Unregister_server<WithCallbackMethod_Get_connec_poor<WithCallbackMethod_Heartbeat<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register_server() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register_server(::grpc::ServerContext* /*context*/, const ::rpc_server::RegisterServerReq* /*request*/, ::rpc_server::RegisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unregister_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unregister_server() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Unregister_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister_server(::grpc::ServerContext* /*context*/, const ::rpc_server::UnregisterServerReq* /*request*/, ::rpc_server::UnregisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get_connec_poor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get_connec_poor() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Get_connec_poor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_connec_poor(::grpc::ServerContext* /*context*/, const ::rpc_server::MultipleConnectPoorReq* /*request*/, ::rpc_server::MultipleConnectPoorRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::HeartbeatReq* /*request*/, ::rpc_server::HeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register_server() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register_server(::grpc::ServerContext* /*context*/, const ::rpc_server::RegisterServerReq* /*request*/, ::rpc_server::RegisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister_server(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unregister_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unregister_server() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Unregister_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister_server(::grpc::ServerContext* /*context*/, const ::rpc_server::UnregisterServerReq* /*request*/, ::rpc_server::UnregisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregister_server(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get_connec_poor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get_connec_poor() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Get_connec_poor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_connec_poor(::grpc::ServerContext* /*context*/, const ::rpc_server::MultipleConnectPoorReq* /*request*/, ::rpc_server::MultipleConnectPoorRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet_connec_poor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::HeartbeatReq* /*request*/, ::rpc_server::HeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register_server() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register_server(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register_server(::grpc::ServerContext* /*context*/, const ::rpc_server::RegisterServerReq* /*request*/, ::rpc_server::RegisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register_server(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Unregister_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Unregister_server() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unregister_server(context, request, response); }));
    }
    ~WithRawCallbackMethod_Unregister_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unregister_server(::grpc::ServerContext* /*context*/, const ::rpc_server::UnregisterServerReq* /*request*/, ::rpc_server::UnregisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unregister_server(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get_connec_poor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get_connec_poor() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get_connec_poor(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get_connec_poor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get_connec_poor(::grpc::ServerContext* /*context*/, const ::rpc_server::MultipleConnectPoorReq* /*request*/, ::rpc_server::MultipleConnectPoorRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get_connec_poor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::HeartbeatReq* /*request*/, ::rpc_server::HeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register_server() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc_server::RegisterServerReq, ::rpc_server::RegisterServerRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc_server::RegisterServerReq, ::rpc_server::RegisterServerRes>* streamer) {
                       return this->StreamedRegister_server(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register_server(::grpc::ServerContext* /*context*/, const ::rpc_server::RegisterServerReq* /*request*/, ::rpc_server::RegisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister_server(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc_server::RegisterServerReq,::rpc_server::RegisterServerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unregister_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unregister_server() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc_server::UnregisterServerReq, ::rpc_server::UnregisterServerRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc_server::UnregisterServerReq, ::rpc_server::UnregisterServerRes>* streamer) {
                       return this->StreamedUnregister_server(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unregister_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unregister_server(::grpc::ServerContext* /*context*/, const ::rpc_server::UnregisterServerReq* /*request*/, ::rpc_server::UnregisterServerRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregister_server(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc_server::UnregisterServerReq,::rpc_server::UnregisterServerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get_connec_poor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get_connec_poor() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc_server::MultipleConnectPoorReq, ::rpc_server::MultipleConnectPoorRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc_server::MultipleConnectPoorReq, ::rpc_server::MultipleConnectPoorRes>* streamer) {
                       return this->StreamedGet_connec_poor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get_connec_poor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get_connec_poor(::grpc::ServerContext* /*context*/, const ::rpc_server::MultipleConnectPoorReq* /*request*/, ::rpc_server::MultipleConnectPoorRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet_connec_poor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc_server::MultipleConnectPoorReq,::rpc_server::MultipleConnectPoorRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc_server::HeartbeatReq, ::rpc_server::HeartbeatRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc_server::HeartbeatReq, ::rpc_server::HeartbeatRes>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::rpc_server::HeartbeatReq* /*request*/, ::rpc_server::HeartbeatRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc_server::HeartbeatReq,::rpc_server::HeartbeatRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register_server<WithStreamedUnaryMethod_Unregister_server<WithStreamedUnaryMethod_Get_connec_poor<WithStreamedUnaryMethod_Heartbeat<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register_server<WithStreamedUnaryMethod_Unregister_server<WithStreamedUnaryMethod_Get_connec_poor<WithStreamedUnaryMethod_Heartbeat<Service > > > > StreamedService;
};

}  // namespace rpc_server


#endif  // GRPC_server_5fcentral_2eproto__INCLUDED
